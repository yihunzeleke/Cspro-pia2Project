{Application 'SURVEYHHRSTR' logic file generated by CSPro}
PROC GLOBAL

	// ***USER DEFINED FUNCTIONS***
	numeric currMonYear;
	numeric CurrMonth;

	//FIND MAX UNIQUE HH MEMBER NUMBER AND RETURN
	function alpha findUnqHhMemNum(string memNum);
		while find(TM_HH_RSTR_DICT, =, concat(HHR_PROVINCE, HHR_DISTRICT, HHR_VILLAGE, HHR_EACODE, HHR_SHH, HHR_TEAM_ID, memNum)) = 1 do
			memNum = edit("99", tonumber(memNum) + 1);
		enddo;
		findUnqHhMemNum = memNum;
	end;


	// REQUIRE ENTRY FOR ALPHA VARIABLES
	function reqEntryAlpha(string alphvar)
		if alphvar = "" then
			errmsg("Sorry! This response is required.");
			reenter;
		endif;
	end;

	// FIND DATE AND TIME. FORMAT: YYYYMMDD HH:MM:SS
	function string FindDateTime()
		string startTime = edit("99:99:99",systime());
		string startDate = edit("99999999",sysdate("YYYYMMDD"));
		FindDateTime = startDate + " " + startTime;
	end;
	
	function string caseLabelSet()
		string tempMemId;
		string tempName;
		string tempAge;
		string tempSex;

		if strip(HHR_HHMEM_ID) <> "" then
			tempMemID = strip(HHR_HHMEM_ID);
		else
			tempMemId = "No ID entered";
		endif;

		if strip(HHRNAME) <> "" then
			tempName = strip(HHRNAME);
		else
			tempName = "No name entered";
		endif;

		if AGEYEARS <> notappl then
			string ageString = edit("ZZ9", AGEYEARS);
			if ageString[1:1] = " " then
				tempAge = ageString[2];
			else
				tempAge = ageString;
			endif;
		else
			tempAge = "No age entered";
		endif;

		if SEX <> notappl then
			tempSex = getvaluelabel(SEX);
		else
			tempSex = "No sex entered";
		endif;

		caseLabelSet = maketext("%s - %s (AGE: %s); SEX %s (NOT SYNCED)", tempMemId, tempName, tempAge, tempSex)
	end;

	//UPDATE HH ROSTER FOR EXIT
	function updateHhRoster()

		string hhRstrPffName = ".\surveyHhRstr.pff";
		
		file hhRstrPff;
		if setfile(hhRstrPff, hhRstrPffName, create) = 0 then
			errmsg("Failed to open %s", hhRstrPffName);
		endif;
		
		filewrite(hhRstrPff, "[Run Information]");
		filewrite(hhRstrPff, "Version=CSPro 7.2");
		filewrite(hhRstrPff, "AppType=Entry");
		filewrite(hhRstrPff, "Description=Household Roster");
	
		filewrite(hhRstrPff, "[DataEntryInit]");
		filewrite(hhRstrPff, "StartMode=Modify");
		filewrite(hhRstrPff, "Lock=Verify");
		filewrite(hhRstrPff, "AutoAdd=No");
		filewrite(hhRstrPff, "ShowInApplicationListing=Never");
		filewrite(hhRstrPff, "CaseListingFilter=^%s.*", concat(HHR_PROVINCE, HHR_DISTRICT, HHR_VILLAGE, HHR_EACODE, HHR_SHH, HHR_TEAM_ID));

		filewrite(hhRstrPff, "[Files]");
		filewrite(hhRstrPff, "Application=.\surveyHhRstr.ent");
		filewrite(hhRstrPff, "InputData=.\surveyHhRstr.csdb|CSPRODB");
		filewrite(hhRstrPff, "Paradata=.\surveyHhRstr.cslog");
	
		filewrite(hhRstrPff, "[ExternalFiles]");
		filewrite(hhRstrPff, "TM_HH_RSTR_MIN_DICT=..\surveyHhRstrMin\surveyHhRstrMin.csdb|CSPRODB");
		filewrite(hhRstrPff, "TM_IND_INT_DICT=..\surveyIndInt\surveyIndInt.csdb|CSPRODB");
		filewrite(hhRstrPff, "TM_SURV_DATA_HUB_DICT=..\shared\tmSurveyDataHub.csdb|CSPRODB");
	
		filewrite(hhRstrPff, "[Parameters]");
		filewrite(hhRstrPff, "OnExit=..\surveyHhInt\surveyHhInt.pff");
		filewrite(hhRstrPff, "HHI_PROVINCE_PASS=%s", HHR_PROVINCE);
		filewrite(hhRstrPff, "HHI_DISTRICT_PASS=%s", HHR_DISTRICT);
		filewrite(hhRstrPff, "HHI_VILLAGE_PASS=%s", HHR_VILLAGE);
		filewrite(hhRstrPff, "HHI_EACODE_PASS=%s", HHR_EACODE);
		filewrite(hhRstrPff, "HHI_SHH_PASS=%s", HHR_SHH);
		filewrite(hhRstrPff, "HHI_TEAM_ID_PASS=%s", HHR_TEAM_ID);
		filewrite(hhRstrPff, "HHI_STRTDT_PASS=%s", HHR_LISTINGFORMSDT); //pass LISTINGFORMSDT  to subsections
		filewrite(hhRstrPff, "HHI_EA_UUID_PASS=%s", HHR_HHI_UUID);
		filewrite(hhRstrPff, "HHI_EA_DEVICEID_PASS=%s",HHR_DEVICEID);

		close(hhRstrPff);

	end;

	//BUILT IN FUNCTION TO OVERRIDE STOP FUNCTIONALITY, ELIMINATING PROMPTS
	function OnStop()
		if visualvalue(HHR_DE_START_FLAG) = 1 then
			savepartial();
		endif;
		execpff(".\surveyHhRstr.pff", stop);
	end;

PROC SURVEYHHRSTR_FF

PROC TM_HH_RSTR_LEVEL

preproc
	if sysparm("HHI_PROVINCE_PASS") <> "" and HHR_PROVINCE = "" then
		HHR_PROVINCE = sysparm("HHI_PROVINCE_PASS");
		setproperty(HHR_PROVINCE, "Protected", "Yes");
	endif;
	
	if sysparm("HHI_DISTRICT_PASS") <> "" and HHR_DISTRICT = "" then
		HHR_DISTRICT = sysparm("HHI_DISTRICT_PASS");
		setproperty(HHR_DISTRICT, "Protected", "Yes");
	endif;
	
	if sysparm("HHI_VILLAGE_PASS") <> "" and HHR_VILLAGE = "" then
		HHR_VILLAGE = sysparm("HHI_VILLAGE_PASS");
		setproperty(HHR_VILLAGE, "Protected", "Yes");
	endif;

	if sysparm("HHI_EACODE_PASS") <> "" and HHR_EACODE = "" then
		HHR_EACODE = sysparm("HHI_EACODE_PASS");
		setproperty(HHR_EACODE, "Protected", "Yes");
	endif;
	
	if sysparm("HHI_SHH_PASS") <> "" and HHR_SHH = "" then
		HHR_SHH = sysparm("HHI_SHH_PASS");
		setproperty(HHR_SHH, "Protected", "Yes");
	endif;

	if sysparm("HHI_TEAM_ID_PASS") <> "" and HHR_TEAM_ID = "" then
		HHR_TEAM_ID = sysparm("HHI_TEAM_ID_PASS");
		setproperty(HHR_TEAM_ID, "Protected", "Yes");
	endif;

	if sysparm("HHI_STRTDT_PASS") <> "" and HHR_LISTINGFORMSDT = "" then
		HHR_LISTINGFORMSDT = sysparm("HHI_STRTDT_PASS");
		setproperty(HHR_LISTINGFORMSDT, "Protected", "Yes");
	endif;

	if sysparm("HHI_EA_UUID_PASS") <> "" and HHR_HHI_UUID = "" then
		HHR_HHI_UUID = sysparm("HHI_EA_UUID_PASS");
		setproperty(HHR_HHI_UUID, "Protected", "Yes");
	endif;
	
	if sysparm("HHI_EA_DEVICEID_PASS") <> "" then
		HHR_DEVICEID = sysparm("HHI_EA_DEVICEID_PASS");
		setproperty(HHR_DEVICEID, "Protected", "Yes");
	endif;

	if HHR_HHMEM_ID = "" then
		HHR_HHMEM_ID = findUnqHhMemNum("01");
	endif;

	updateHhRoster();

	if demode() <> add and visualvalue(HHR_DE_START_FLAG) = 1 then
		advance to SICK3MO;
	endif;

	//currMonYear = sysdate("MMYYYY");
	currMonYear = sysdate("YYYYMMDD");
	//take a look ,return the current month
	CurrMonth = int(currMonYear/100) % 100;
	  
PROC SURVEYHHRSTR_LEVEL_FORM

postproc
	//ADD HH MEMBER RECORD TO KID ROSTER DICT IF IT DOESN'T ALREADY EXIST
	if AGEYEARS < 15 or (AGEYEARS >= 15 and AGEYEARS <= 17 and EMANCIPATED = 2) then
		if countcases(TM_HH_RSTR_MIN_DICT where (HHRM_PROVINCE = HHR_PROVINCE and HHRM_DISTRICT = HHR_DISTRICT and HHRM_VILLAGE = HHR_VILLAGE and 
		HHRM_EACODE = HHR_EACODE and HHRM_SHH = HHR_SHH and HHRM_TEAM_ID = HHR_TEAM_ID and HHRM_HHMEM_ID = HHR_HHMEM_ID)) = 0 then 
			clear(TM_HH_RSTR_MIN_DICT);
			HHRM_PROVINCE = HHR_PROVINCE;
			HHRM_DISTRICT = HHR_DISTRICT;
			HHRM_VILLAGE = HHR_VILLAGE;
			HHRM_EACODE = HHR_EACODE;
			HHRM_SHH = HHR_SHH;
			HHRM_TEAM_ID = HHR_TEAM_ID;
			HHRM_HHMEM_ID = HHR_HHMEM_ID;
			HHRM_LISTINGFORMSDT = HHR_LISTINGFORMSDT;
			HHRM_HHI_UUID = HHR_HHI_UUID;
			setcaselabel(TM_HH_RSTR_MIN_DICT, caseLabelSet());
			writecase(TM_HH_RSTR_MIN_DICT);
			//sqlquery(LISTING_EA_DICT, maketext('update cases set partial_save_mode = 2, partial_save_field_name = "TM_HH_RSTR_MIN_LEVEL", partial_save_level_key = "", partial_save_record_occurrence=0, partial_save_item_occurrence=0, partial_save_subitem_occurrence=0 where key="%s";', 
			//concat(MN_PROVINCE, MN_DISTRICT, MN_VILLAGE, MN_EA, MN_ENUMERATOR_ID)));
		endif;
	endif;

	//ADD HH MEMBER RECORD TO IND INT DICT IF IT DOESN'T ALREADY EXIST
	{if countcases(TM_IND_INT_DICT where (IND_PROVINCE = HHR_PROVINCE and IND_DISTRICT = HHR_DISTRICT and IND_VILLAGE = HHR_VILLAGE and 
	IND_EACODE = HHR_EACODE and IND_SHH = HHR_SHH and IND_TEAM_ID = HHR_TEAM_ID and IND_HHMEM_ID = HHR_HHMEM_ID)) = 0 then 
			clear(TM_IND_INT_DICT);
			IND_PROVINCE = HHR_PROVINCE;
			IND_DISTRICT = HHR_DISTRICT;
			IND_VILLAGE = HHR_VILLAGE;
			IND_EACODE = HHR_EACODE;
			IND_SHH = HHR_SHH;
			IND_TEAM_ID = HHR_TEAM_ID;
			IND_HHMEM_ID = HHR_HHMEM_ID;
			IND_LISTINGFORMSDT = HHR_LISTINGFORMSDT;
			IND_HHI_UUID = HHR_HHI_UUID;
			setcaselabel(TM_IND_INT_DICT, maketext("Household - %s, %s", HHR_SHH, HHRNAME));
			writecase(TM_IND_INT_DICT);
			//sqlquery(LISTING_EA_DICT, maketext('update cases set partial_save_mode = 2, partial_save_field_name = "TM_IND_INT_LEVEL", partial_save_level_key = "", partial_save_record_occurrence=0, partial_save_item_occurrence=0, partial_save_subitem_occurrence=0 where key="%s";', 
			//concat(MN_PROVINCE, MN_DISTRICT, MN_VILLAGE, MN_EA, MN_ENUMERATOR_ID)));
	endif;}

	//ADD HH MEMBER RECORD TO SURVEY HUB DICT IF IT DOESN'T ALREADY EXIST
	if countcases(TM_SURV_DATA_HUB_DICT where (SURV_HUB_PROVINCE = HHR_PROVINCE and SURV_HUB_DISTRICT = HHR_DISTRICT and SURV_HUB_VILLAGE = HHR_VILLAGE and 
	SURV_HUB_EACODE = HHR_EACODE and SURV_HUB_SHH = HHR_SHH and SURV_HUB_TEAM_ID = HHR_TEAM_ID and SURV_HUB_HHMEM_ID = HHR_HHMEM_ID)) = 0 then 
		clear(TM_SURV_DATA_HUB_DICT);
		SURV_HUB_PROVINCE = HHR_PROVINCE;
		SURV_HUB_DISTRICT = HHR_DISTRICT;
		SURV_HUB_VILLAGE = HHR_VILLAGE;
		SURV_HUB_EACODE = HHR_EACODE;
		SURV_HUB_SHH = HHR_SHH;
		SURV_HUB_TEAM_ID = HHR_TEAM_ID;
		SURV_HUB_HHMEM_ID = HHR_HHMEM_ID;
		SURV_HUB_LISTINGFORMSDT = HHR_LISTINGFORMSDT;
		SURV_HUB_HHI_UUID = HHR_HHI_UUID;
		SURV_HUB_STATUS_TS = FindDateTime();
		SURV_HUB_STATUS = 1;
		SURV_HUB_NAME = HHRNAME;
		SURV_HUB_SEX = SEX;
		SURV_HUB_AGE_YRS = AGEYEARS;
		SURV_HUB_AGE_MNTHS = AGEMONTHS;
		SURV_HUB_EMAN = EMANCIPATED;
		
		//setcaselabel(TM_IND_INT_DICT, maketext("Household - %s, %s", HHR_SHH, HHRNAME));
		writecase(TM_SURV_DATA_HUB_DICT);
		//sqlquery(LISTING_EA_DICT, maketext('update cases set partial_save_mode = 2, partial_save_field_name = "TM_IND_INT_LEVEL", partial_save_level_key = "", partial_save_record_occurrence=0, partial_save_item_occurrence=0, partial_save_subitem_occurrence=0 where key="%s";', 
		//concat(MN_PROVINCE, MN_DISTRICT, MN_VILLAGE, MN_EA, MN_ENUMERATOR_ID)));
	endif;

	//ADD HH MEMBER RECORD TO HH MEMBER PASS (FOR VALUE LISTS)
	if countcases(TM_HH_MEM_PASS_DICT where (MEM_PASS_PROVINCE = HHR_PROVINCE and MEM_PASS_DISTRICT = HHR_DISTRICT and MEM_PASS_VILLAGE = HHR_VILLAGE and 
	MEM_PASS_EACODE = HHR_EACODE and MEM_PASS_SHH = HHR_SHH and MEM_PASS_TEAM_ID = HHR_TEAM_ID and MEM_PASS_HHMEM_ID = HHR_HHMEM_ID)) = 0 then 
		clear(TM_SURV_DATA_HUB_DICT);
		MEM_PASS_PROVINCE = HHR_PROVINCE;
		MEM_PASS_DISTRICT = HHR_DISTRICT;
		MEM_PASS_VILLAGE = HHR_VILLAGE;
		MEM_PASS_EACODE = HHR_EACODE;
		MEM_PASS_SHH = HHR_SHH;
		MEM_PASS_TEAM_ID = HHR_TEAM_ID;
		MEM_PASS_HHMEM_ID = HHR_HHMEM_ID;
		MEM_PASS_HHI_UUID = HHR_HHI_UUID;
		MEM_PASS_NAME = HHRNAME;
		MEM_PASS_AGE_YRS = AGEYEARS;
		MEM_PASS_EMAN = EMANCIPATED;
		writecase(TM_HH_MEM_PASS_DICT);
	endif;

PROC HHRNAME

postproc
	reqEntryAlpha($);

	if loadcase(TM_SURV_DATA_HUB_DICT, HHR_PROVINCE, HHR_DISTRICT, HHR_VILLAGE, HHR_EACODE, HHR_SHH, HHR_TEAM_ID, HHR_HHMEM_ID) then
		SURV_HUB_NAME = $;
		clear(TM_SURV_DATA_HUB_DICT);
	endif;
	
	if $ <> "" then
		HHR_DE_START_FLAG = 1;
		setcaselabel(TM_HH_RSTR_DICT, caseLabelSet());
	endif;

PROC SEX

postproc
	if loadcase(TM_SURV_DATA_HUB_DICT, HHR_PROVINCE, HHR_DISTRICT, HHR_VILLAGE, HHR_EACODE, HHR_SHH, HHR_TEAM_ID, HHR_HHMEM_ID) then
		SURV_HUB_SEX = $;
		clear(TM_SURV_DATA_HUB_DICT);
	endif;

	if $ <> notappl then
		setcaselabel(TM_HH_RSTR_DICT, caseLabelSet());
	endif;
PROC AGEYEARS

postproc 
	if $ <> notappl and $ <> 0 and  $ < 2 then
		errmsg("If age is less than 2 years, please code '0'. "); 
		reenter;
	endif;

	if loadcase(TM_SURV_DATA_HUB_DICT, HHR_PROVINCE, HHR_DISTRICT, HHR_VILLAGE, HHR_EACODE, HHR_SHH, HHR_TEAM_ID, HHR_HHMEM_ID) then
		SURV_HUB_AGE_YRS = $;
		clear(TM_SURV_DATA_HUB_DICT);
	endif;

	if $ <> notappl then
		setcaselabel(TM_HH_RSTR_DICT, caseLabelSet());
	endif;
PROC AGEMONTHS
preproc
	ask if AGEYEARS = 0;

postproc 
	if $ >= 24 then
		errmsg("Number of months cannot be greater than 24. If age is 2 years or more, go back and enter age in years."); 
		reenter;
	endif;

	if loadcase(TM_SURV_DATA_HUB_DICT, HHR_PROVINCE, HHR_DISTRICT, HHR_VILLAGE, HHR_EACODE, HHR_SHH, HHR_TEAM_ID, HHR_HHMEM_ID) then
		SURV_HUB_AGE_MNTHS = $;
		clear(TM_SURV_DATA_HUB_DICT);
	endif;

PROC EMANCIPATED

preproc
	ask if AGEYEARS > 14 and AGEYEARS < 18;

PROC BLOCK000

preproc
	setproperty(LIVEAWAYY, "CanEnterNotAppl","NoConfirm");
	
	ask if LIVE_HERE = 1 and SLEEPHERE = 2;
	
postproc 
	
	numeric monYearEntry = tonumber(edit("9999",LIVEAWAYY));
	numeric monEntry = tonumber(edit("99", LIVEAWAYM));
	
	
	if LIVEAWAYY < 1900 or LIVEAWAYY > 2019 then
		errmsg("Year must be greater than 1900 and less than current year.");
		reenter;
	
	elseif (monEntry >  CurrMonth) and (monYearEntry = monYearEntry)  then
		errmsg("Month must be less than or Equal to current Month.");
		reenter;
		//...
	elseif (LIVEAWAYM = -8 or -9) or (LIVEAWAYY = -8 or -9) then
		skip to sick3mo;
	elseif monYearEntry = monYearEntry then
		skip to sick3mo;

reenter;
	endif;
PROC LIVEAWAYM



PROC LIVEAWAYY


PROC LIVEAWAY

preproc
	ask if LIVE_HERE = 1 and SLEEPHERE = 2 and (LIVEAWAYY > 0 or LIVEAWAYM > 0);

//--CURRENTLY ANY VALUE OTHER THAN DK/REF CAUSES QUESTION TO SHOW; should only show if person gone 1+ months.
//  needs to check (sysdate("MMYYYY") - (liveawaym + liveawayy) and show only if > 0 months
PROC LIVEREGION

preproc
	ask if LIVEAWAY = 1;
