{Application 'SURVEYMENU' logic file generated by CSPro}
PROC GLOBAL
	// ***USER DEFINED VARIABLES***	
	array string distCodes(99);
	array string distLabels(99);
	array string vilCodes(99);
	array string vilLabels(99);
	array string eaCodes(99);
	array string eaLabels(99);
	array string hhCodes(99);
	array string hhLabels(99);
	array string exstTeamIds(99);
	string chosenProv;
	string chosenDist;
	string chosenVill;
	string chosenEa;
	string chosenHh;
	string chosenTeamId;
	string adjustedPath;
	string puRoster;

	// ***USER DEFINED FUNCTIONS***
	// FIND DATE AND TIME. FORMAT: YYYYMMDD HH:MM:SS
	function string FindDateTime()
		string startTime = edit("99:99:99",systime());
		string startDate = edit("99999999",sysdate("YYYYMMDD"));
		FindDateTime = startDate + " " + startTime;
	end;

	//CLEAR ARRAY BEFORE RE-USE
	function clearStringArray(array string ar)
		numeric i = 1;
		while i < length(ar) do
			ar(i) = "";
			i = i + 1;
		enddo;
	end;

	//CHECK GEOVAR VALUE LIST ARRAY FOR EXISTING VALUES
	//0 = NOT FOUND, 1 = FOUND
	function arrayUnqCheck(array string ar, alpha val)
		numeric foundFlag = 0;
		do varying numeric i = 1 until foundFlag = 1 or i = length(ar, 1)
			if ar(i) = val then
				foundFlag = 1;
			endif;
		enddo;
		arrayUnqCheck = foundFlag;
	end;

	//RETURN ERROR MESSAGE IF RESPONSE IS NOT SUPPLIED
	function reqCheck(alpha val)
		if val = "" then
			errmsg("A value must be entered before you can proceed.");
			reenter;
		endif;
	end;

	//PULL SERVER URL FROM .log FILE
	function string scrapeUrl()
		string line;
		string serverUrl = "";
		file logFile;
		if setfile(logFile, "../../sync.log", update) = 0 then
			errmsg("Failed to open sync.log");
		endif;

		while fileread(logFile, line) do
			if pos("INFO: Connect to server http", line) > 0 then
				if pos(" ", line[pos("http", line)]) = 0 then
					serverUrl = line[pos("http", line):length(line) - pos("http", line) + 1];
				else
					serverUrl = line[pos("http", line):pos(" ", line[pos("http", line)]) - 1];
				endif;
			endif;
		enddo;
		
		close(logFile);
		if serverUrl = "" then
			errmsg("No server URL found, could not sync.  Please connect to a server URL by choosing 'Add Application' in the main menu, choosing CSWeb server, entering a URL, and hitting 'CONNECT'");
		endif;
		scrapeUrl = serverUrl;
	end;

	//SET CASE LIST LABEL FOR IND INT CASES SOURCED FROM HUB
	function string hubCaseLabelSet(string sentId, string sentName, numeric sentAge, numeric sentSex)
		string tempMemId;
		string tempName;
		string tempAge;
		string tempSex;

		if strip(sentId) <> "" then
			tempMemID = strip(sentId);
		else
			tempMemId = "No ID entered";
		endif;

		if strip(sentName) <> "" then
			tempName = strip(sentName);
		else
			tempName = "No name entered";
		endif;

		if sentAge <> notappl then
			string ageString = edit("ZZ9", sentAge);
			if ageString[1:1] = " " then
				tempAge = ageString[2];
			else
				tempAge = ageString;
			endif;
		else
			tempAge = "No age entered";
		endif;

		if sentSex <> notappl then
			tempSex = getlabel(SURV_HUB_SEX_VS1, sentSex);
		else
			tempSex = "No sex entered";
		endif;

		hubCaseLabelSet = maketext("%s - %s (AGE: %s); SEX %s (NOT SYNCED)", tempMemId, tempName, tempAge, tempSex)
	end;

	//SYNC DATA FROM HH INT, HH ROSTER, HH MINORS ROSTER, and IND INT
	function allDataSync()
		string curUrl = scrapeUrl();
		if curUrl <> "" then
			if syncconnect(CSWeb, curUrl) then
				//UPLOAD ALL DATA FOR ALL MAIN DICTS
				syncdata(PUT, TM_HH_INT_DICT);
				syncdata(PUT, TM_HH_RSTR_DICT);
				syncdata(PUT, TM_HH_RSTR_MIN_DICT);
				syncdata(PUT, TM_IND_INT_DICT);
				syncdata(PUT, TM_SURV_DATA_HUB_DICT);
				
				//UPLOAD EACH SIGNATURE THAT HASN'T BEEN UPLAODED YET (SIGSYNCSTATUS = 1) TO THE SERVER
				forcase TM_SURVEYSIG_DICT where SIGSYNCSTATUS = 1 do
					if syncfile(PUT, pathname(csentry) + maketext("temp/images/%s", strip(SIGIMGNAME)), "/sigImages/" + strip(SIGIMGNAME)) then 
						//UPDATE STATUS SO IT ISN'T UPLOADED AGAIN
						SIGSYNCSTATUS = 2;
						writecase(TM_SURVEYSIG_DICT);
					endif;
				enddo;
				
				syncdata(PUT, TM_SURVEYSIG_DICT);
	
				//DOWNLOAD UPDATED GEOVARS
				syncdata(GET, TM_SURV_GEOVARS_DICT);
	
				forcase	TM_HH_INT_DICT do
					setcaselabel(TM_HH_INT_DICT, maketext("EA - %s, Household %s (SYNCED)", HHI_EACODE, HHI_SHH));
					writecase(TM_HH_INT_DICT);
				endfor;
	
				//DISCONNECT FROM SERVER
				syncdisconnect();
			endif;
		endif;
		stop();
	end;

	//WRITE OUT AND LAUNCH HOUSEHOLD INTERVIEW (NEW ENTRY)
	function launchHhInt()
		//ADD SELECTED HH TO HH INT DICT IF IT DOESN'T ALREADY EXIST
		if countcases(TM_HH_INT_DICT where (HHI_PROVINCE = SURV_MN_PROVINCE and HHI_DISTRICT = SURV_MN_DISTRICT and HHI_VILLAGE = SURV_MN_VILLAGE and 
		HHI_EACODE = SURV_MN_EACODE and HHI_SHH = SURV_MN_SHH and HHI_TEAM_ID = SURV_MN_TEAM_ID)) = 0 then 
			clear(TM_HH_INT_DICT);
			HHI_PROVINCE = SURV_MN_PROVINCE;
			HHI_DISTRICT = SURV_MN_DISTRICT;
			HHI_VILLAGE = SURV_MN_VILLAGE;
			HHI_EACODE = SURV_MN_EACODE;
			HHI_SHH = SURV_MN_SHH;
			HHI_TEAM_ID = SURV_MN_TEAM_ID;
			setcaselabel(TM_HH_INT_DICT, maketext("EA - %s, Household %s (NOT SYNCED)", SURV_MN_EACODE, SURV_MN_SHH));
			writecase(TM_HH_INT_DICT);
			sqlquery(TM_HH_INT_DICT, maketext('update cases set partial_save_mode = 2, partial_save_field_name = "TM_HH_INT_LEVEL", partial_save_level_key = "", partial_save_record_occurrence=0, partial_save_item_occurrence=0, partial_save_subitem_occurrence=0 where key="%s";', 
			concat(SURV_MN_PROVINCE, SURV_MN_DISTRICT, SURV_MN_VILLAGE, SURV_MN_EACODE, SURV_MN_SHH, SURV_MN_TEAM_ID)));
		endif;

		string hhIntPffName = "..\surveyHhInt\surveyHhInt.pff";
		
		file hhIntPff;
		if setfile(hhIntPff, hhIntPffName, create) = 0 then
			errmsg("Failed to open %s", hhIntPffName);
		endif;
		
		filewrite(hhIntPff, "[Run Information]");
		filewrite(hhIntPff, "Version=CSPro 7.2");
		filewrite(hhIntPff, "AppType=Entry");
		filewrite(hhIntPff, "Description=Household Interview");
	
		filewrite(hhIntPff, "[DataEntryInit]");
		filewrite(hhIntPff, "StartMode=Modify;%s", concat(SURV_MN_PROVINCE, SURV_MN_DISTRICT, SURV_MN_VILLAGE, SURV_MN_EACODE, SURV_MN_SHH, SURV_MN_TEAM_ID));
		filewrite(hhIntPff, "Lock=Verify, Add");
		filewrite(hhIntPff, "AutoAdd=No");
		filewrite(hhIntPff, "ShowInApplicationListing=Never");
		filewrite(hhIntPff, "CaseListingFilter=^%s.*", concat(SURV_MN_PROVINCE, SURV_MN_DISTRICT, SURV_MN_VILLAGE, SURV_MN_EACODE, SURV_MN_SHH, SURV_MN_TEAM_ID));

		filewrite(hhIntPff, "[Files]");
		filewrite(hhIntPff, "Application=.\surveyHhInt.ent");
		filewrite(hhIntPff, "InputData=.\surveyHhInt.csdb|CSPRODB");
		filewrite(hhIntPff, "Paradata=.\surveyHhInt.cslog");
	
		filewrite(hhIntPff, "[ExternalFiles]");
		filewrite(hhIntPff, "TM_SURV_GEOVARS_DICT=..\shared\tmSurveyGeovars.csdb|CSPRODB");
		filewrite(hhIntPff, "TM_SURV_DATA_HUB_DICT=..\shared\tmSurveyDataHub.csdb|CSPRODB");
		filewrite(hhIntPff, "TM_IND_INT_DICT=..\surveyIndInt\surveyIndInt.csdb|CSPRODB");
		filewrite(hhIntPff, "TM_SURVEYSIG_DICT=..\shared\tmSurveySignatures.csdb|CSPRODB");
		filewrite(hhIntPff, "TM_HH_MEM_PASS_DICT=..\shared\tmHhMemPass.csdb|CSPRODB");
	
		filewrite(hhIntPff, "[Parameters]");
		filewrite(hhIntPff, "OnExit=..\surveyMenu\surveyMenu.pff");

		close(hhIntPff);
		
		//Launch modified pff
		execpff("..\surveyHhInt\surveyHhInt.pff", stop);

	end;
	
	//LAUNCH HOUSEHOLD INTERVIEW (EDIT PREVIOUS ENTRY)
	function editHhInt()

		string hhIntPffName = "..\surveyHhInt\surveyHhInt.pff";
		
		file hhIntPff;
		if setfile(hhIntPff, hhIntPffName, create) = 0 then
			errmsg("Failed to open %s", hhIntPffName);
		endif;
		
		filewrite(hhIntPff, "[Run Information]");
		filewrite(hhIntPff, "Version=CSPro 7.2");
		filewrite(hhIntPff, "AppType=Entry");
		filewrite(hhIntPff, "Description=Household Interview");
	
		filewrite(hhIntPff, "[DataEntryInit]");
		filewrite(hhIntPff, "StartMode=Modify;%s", concat(chosenProv, chosenDist, chosenVill, chosenEa, chosenHh, chosenTeamId));
		filewrite(hhIntPff, "Lock=Verify, Add");
		filewrite(hhIntPff, "AutoAdd=No");
		filewrite(hhIntPff, "ShowInApplicationListing=Never");
		filewrite(hhIntPff, "CaseListingFilter=^%s.*", concat(chosenProv, chosenDist, chosenVill, chosenEa, chosenHh, chosenTeamId));

		filewrite(hhIntPff, "[Files]");
		filewrite(hhIntPff, "Application=.\surveyHhInt.ent");
		filewrite(hhIntPff, "InputData=.\surveyHhInt.csdb|CSPRODB");
		filewrite(hhIntPff, "Paradata=.\surveyHhInt.cslog");
	
		filewrite(hhIntPff, "[ExternalFiles]");
		filewrite(hhIntPff, "TM_SURV_GEOVARS_DICT=..\shared\tmSurveyGeovars.csdb|CSPRODB");
		filewrite(hhIntPff, "TM_SURV_DATA_HUB_DICT=..\shared\tmSurveyDataHub.csdb|CSPRODB");
		filewrite(hhIntPff, "TM_IND_INT_DICT=..\surveyIndInt\surveyIndInt.csdb|CSPRODB");
		filewrite(hhIntPff, "TM_SURVEYSIG_DICT=..\shared\tmSurveySignatures.csdb|CSPRODB");
		filewrite(hhIntPff, "TM_HH_MEM_PASS_DICT=..\shared\tmHhMemPass.csdb|CSPRODB");
	
		filewrite(hhIntPff, "[Parameters]");
		filewrite(hhIntPff, "OnExit=..\surveyMenu\surveyMenu.pff");

		close(hhIntPff);
		
		//Launch modified pff
		execpff("..\surveyHhInt\surveyHhInt.pff", stop);

	end;

	//LAUNCH INDIV INT FORM FOR IND INT UPDATES
	function launchIndInt()

		string indIntPffName = "..\surveyIndInt\surveyIndInt.pff";
		
		file indIntPff;
		if setfile(indIntPff, indIntPffName, create) = 0 then
			errmsg("Failed to open %s", indIntPffName);
		endif;
		
		filewrite(indIntPff, "[Run Information]");
		filewrite(indIntPff, "Version=CSPro 7.2");
		filewrite(indIntPff, "AppType=Entry");
		filewrite(indIntPff, "Description=Individual Interview");
	
		filewrite(indIntPff, "[DataEntryInit]");
		filewrite(indIntPff, "StartMode=Modify");
		filewrite(indIntPff, "Lock=Verify, Add");
		filewrite(indIntPff, "AutoAdd=No");
		filewrite(indIntPff, "ShowInApplicationListing=Never");
		filewrite(indIntPff, "CaseListingFilter=^%s.*", concat(chosenProv, chosenDist, chosenVill, chosenEa, chosenHh, chosenTeamId));

		filewrite(indIntPff, "[Files]");
		filewrite(indIntPff, "Application=.\surveyIndInt.ent");
		filewrite(indIntPff, "InputData=.\surveyIndInt.csdb|CSPRODB");
		filewrite(indIntPff, "Paradata=.\surveyIndInt.cslog");
	
		filewrite(indIntPff, "[ExternalFiles]");
		filewrite(indIntPff, "TM_SURV_DATA_HUB_DICT=..\shared\tmSurveyDataHub.csdb|CSPRODB");
		filewrite(indIntPff, "TM_HH_MEM_PASS_DICT=..\shared\tmHhMemPass.csdb|CSPRODB");
		filewrite(indIntPff, "TM_BARCODES_DICT=..\shared\tmBarcodesScans.csdb|CSPRODB");
		filewrite(indIntPff, "TM_SURVEYSIG_DICT=..\shared\tmSurveySignatures.csdb|CSPRODB");
	
		filewrite(indIntPff, "[Parameters]");
		filewrite(indIntPff, "OnExit=..\surveyHhInt\surveyHhInt.pff");
		filewrite(indIntPff, "IND_EA_DEVICEID_PASS=%s",getdeviceid());

		close(indIntPff);
		
		//Launch modified pff
		execpff("..\surveyIndInt\surveyIndInt.pff", stop);

	end;

	//BUILT IN FUNCTION TO OVERRIDE STOP FUNCTIONALITY, ELIMINATING PROMPTS
	function OnStop()
	end;

PROC SURVEYMENU_FF

PROC TM_MENU_LEVEL

preproc
	adjustedPath = pathname(Application)[1:pos("/csentry/", pathname(Application))];
PROC MAIN_MENU

postproc
	if $ = 3 then
		allDataSync();
	endif;

PROC HH_MENU
preproc
	ask if MAIN_MENU = 1;
PROC INDIV_MENU
preproc
	ask if MAIN_MENU = 2;

postproc
	if $ = 3 then
		numeric preCaseCount = countcases(TM_SURV_DATA_HUB_DICT);
		syncserver(Bluetooth);
		numeric postCaseCount = countcases(TM_SURV_DATA_HUB_DICT);
		if preCaseCount < postCaseCount then
			forcase TM_SURV_DATA_HUB_DICT where (SURV_HUB_STATUS = 21  or SURV_HUB_STATUS = 23) do
				//ADD HH MEMBER RECORD TO IND INT DICT IF IT DOESN'T ALREADY EXIST
				if countcases(TM_IND_INT_DICT where (IND_PROVINCE = SURV_HUB_PROVINCE and IND_DISTRICT = SURV_HUB_DISTRICT and IND_VILLAGE = SURV_HUB_VILLAGE and 
				IND_EACODE = SURV_HUB_EACODE and IND_SHH = SURV_HUB_SHH and IND_TEAM_ID = SURV_HUB_TEAM_ID and IND_HHMEM_ID = SURV_HUB_HHMEM_ID)) = 0 then 
					clear(TM_IND_INT_DICT);
					IND_PROVINCE = SURV_HUB_PROVINCE;
					IND_DISTRICT = SURV_HUB_DISTRICT;
					IND_VILLAGE = SURV_HUB_VILLAGE;
					IND_EACODE = SURV_HUB_EACODE;
					IND_SHH = SURV_HUB_SHH;
					IND_TEAM_ID = SURV_HUB_TEAM_ID;
					IND_HHMEM_ID = SURV_HUB_HHMEM_ID;
					IND_LISTINGFORMSDT = SURV_HUB_LISTINGFORMSDT;
					IND_HHI_UUID = SURV_HUB_HHI_UUID;
					setcaselabel(TM_IND_INT_DICT, hubCaseLabelSet(SURV_HUB_HHMEM_ID, SURV_HUB_NAME, SURV_HUB_AGE_YRS, SURV_HUB_SEX));
					writecase(TM_IND_INT_DICT);
					//sqlquery(LISTING_EA_DICT, maketext('update cases set partial_save_mode = 2, partial_save_field_name = "TM_IND_INT_LEVEL", partial_save_level_key = "", partial_save_record_occurrence=0, partial_save_item_occurrence=0, partial_save_subitem_occurrence=0 where key="%s";', 
					//concat(MN_PROVINCE, MN_DISTRICT, MN_VILLAGE, MN_EA, MN_ENUMERATOR_ID)));
					SURV_HUB_STATUS_TS = FindDateTime();
					SURV_HUB_STATUS = 3;
					writecase(TM_SURV_DATA_HUB_DICT);
				endif;
			endfor;
			launchIndInt();
		else
			//NO TRASFER RECORDS FOUND
		endif;
		stop();
	endif;
PROC NEW_HH_FORM
preproc
	ask if HH_MENU = 1;
PROC SURV_MN_PROVINCE

onfocus
	if SURV_MN_DISTRICT <> "" then
		advance to SURV_MN_DISTRICT;
	endif;

postproc
	reqCheck($);
PROC SURV_MN_DISTRICT

onfocus
	if SURV_MN_VILLAGE = "" then
		//Variables
		numeric i = 1;
		//Clear Codes/Labels arrays of previous values
		clearStringArray(distCodes);
		clearStringArray(distLabels);
		
		forcase TM_SURV_GEOVARS_DICT where SURV_MN_PROVINCE = PROVINCE_CODE do
			//Review codes array to see if the value has already been added
			numeric unqCheck = arrayUnqCheck(distCodes, DISTRICT_CODE);
			
			//If the value has not been added, add it to the arrays
			if unqCheck = 0 then
				distCodes(i) = DISTRICT_CODE;
				distLabels(i) = DISTRICT_NAME;
				i = i + 1;
			endif;
		endfor;
		distCodes(i) = "";
		setvalueset($, distCodes, distLabels);
	else
		advance to SURV_MN_VILLAGE;
	endif;
	
postproc
	reqCheck($);
PROC SURV_MN_VILLAGE

onfocus
	if SURV_MN_EACODE = "" then
		//Variables
		numeric i = 1;
		//Clear Codes/Labels arrays of previous values
		clearStringArray(vilCodes);
		clearStringArray(vilLabels);
		
		forcase TM_SURV_GEOVARS_DICT where SURV_MN_PROVINCE = PROVINCE_CODE and SURV_MN_DISTRICT = DISTRICT_CODE do
			//Review codes array to see if the value has already been added
			numeric unqCheck = arrayUnqCheck(vilCodes, VILLAGE_CODE);
			
			//If the value has not been added, add it to the arrays
			if unqCheck = 0 then
				vilCodes(i) = VILLAGE_CODE;
				vilLabels(i) = VILLAGE_NAME;
				i = i + 1;
			endif;
		endfor;
		vilCodes(i) = "";
		setvalueset($, vilCodes, vilLabels);
	else
		advance to SURV_MN_EACODE;
	endif;

postproc
	reqCheck($);
PROC SURV_MN_EACODE

onfocus
	if SURV_MN_SHH = "" then
		//Variables
		numeric i = 1;
		//Clear Codes/Labels arrays of previous values
		clearStringArray(eaCodes);
		clearStringArray(eaLabels);
		
		forcase TM_SURV_GEOVARS_DICT where SURV_MN_PROVINCE = PROVINCE_CODE and SURV_MN_DISTRICT = DISTRICT_CODE and SURV_MN_VILLAGE = VILLAGE_CODE do
			//Review codes array to see if the value has already been added
			numeric unqCheck = arrayUnqCheck(eaCodes, EA_CODE);
		
			//If the value has not been added, add it to the arrays
			if unqCheck = 0 then
				eaCodes(i) = EA_CODE;
				eaLabels(i) = EA_NAME;
				i = i + 1;
			endif;
		endfor;
		eaCodes(i) = "";
		setvalueset($, eaCodes, eaLabels);
	else
		advance to SURV_MN_SHH;
	endif;

postproc
	reqCheck($);
PROC SURV_MN_SHH

onfocus
	if SURV_MN_TEAM_ID = "" then
		//Variables
		numeric i = 1;
		//Clear Codes/Labels arrays of previous values
		clearStringArray(hhCodes);
		clearStringArray(hhLabels);
		
		forcase TM_SURV_GEOVARS_DICT where SURV_MN_PROVINCE = PROVINCE_CODE and SURV_MN_DISTRICT = DISTRICT_CODE and 
		SURV_MN_VILLAGE = VILLAGE_CODE and SURV_MN_EACODE = EA_CODE do
			//Review codes array to see if the value has already been added
			numeric unqCheck = arrayUnqCheck(hhCodes, HH_CODE);
		
			//If the value has not been added, add it to the arrays
			if unqCheck = 0 then
				hhCodes(i) = HH_CODE;
				hhLabels(i) = HH_NAME;
				i = i + 1;
			endif;
		endfor;
		hhCodes(i) = "";
		setvalueset($, hhCodes, hhLabels);
	else
		advance to SURV_MN_TEAM_ID;
	endif;

postproc
	reqCheck($);
PROC SURV_MN_TEAM_ID
postproc
	if HH_MENU = 1 then
		launchHhInt();
	endif;
PROC EXISTING_RECORDS_FORM
preproc
	if (HH_MENU = 2 and countcases(TM_HH_INT_DICT) = 0) then
		errmsg("No household records found on this tablet.");
		stop();
	endif;
	
	if ((INDIV_MENU = 1 or INDIV_MENU = 2) and countcases(TM_IND_INT_DICT) = 0) then
		errmsg("No individual interview records found on this tablet.");
		stop();
	endif;

	ask if ((HH_MENU = 2 and countcases(TM_HH_INT_DICT) > 0) or ((INDIV_MENU = 1 or INDIV_MENU = 2) and countcases(TM_IND_INT_DICT) > 0));

PROC EXISTING_TEAM_ID

onfocus
	if EXISTING_EA = "" then
		//VARIABLES
		numeric i = 1;
		//CLEAR ARRAY OF PREVIOUS VALUES
		clearStringArray(exstTeamIds);
		
		if HH_MENU = 2 then
			forcase TM_HH_INT_DICT do
				//CHECK ARRAY FOR UNIQUNESS OF THIS VALUE
				numeric unqCheck = arrayUnqCheck(exstTeamIds, HHI_TEAM_ID);
				
				//IF VALUE HAS NOT BEEN ADDED TO ARRAY, ADD IT
				if unqCheck = 0 then
					exstTeamIds(i) = HHI_TEAM_ID;
					i = i + 1;
				endif;
			endfor;
		else;
			forcase TM_IND_INT_DICT do
				//CHECK ARRAY FOR UNIQUNESS OF THIS VALUE
				numeric unqCheck = arrayUnqCheck(exstTeamIds, IND_TEAM_ID);
				
				//IF VALUE HAS NOT BEEN ADDED TO ARRAY, ADD IT
				if unqCheck = 0 then
					exstTeamIds(i) = IND_TEAM_ID;
					i = i + 1;
				endif;
			endfor;
		endif;
		exstTeamIds(i) = "";
		setvalueset($, exstTeamIds, exstTeamIds);
	else
		advance to EXISTING_EA;
	endif;
	
postproc
	reqCheck($);
	chosenTeamId = $;
PROC EXISTING_EA

onfocus
	if EXISTING_HHID = "" then
		//VARIABLES
		numeric i = 1;
		//CLEAR ARRAY OF PREVIOUS VALUES
		clearStringArray(eaCodes);
		clearStringArray(eaLabels);
		
		if HH_MENU = 2 then
			forcase TM_HH_INT_DICT where HHI_TEAM_ID = EXISTING_TEAM_ID do
				//Review codes array to see if the value has already been added
				numeric unqCheck = arrayUnqCheck(eaCodes, HHI_EACODE);
			
				//If the value has not been added, add it to the arrays
				if unqCheck = 0 then
					eaCodes(i) = HHI_EACODE;
					if countcases(TM_SURV_GEOVARS_DICT where EA_CODE = HHI_EACODE) > 1 then
						warning("EA name not unique, using last entry");
					endif;
					forcase TM_SURV_GEOVARS_DICT where EA_CODE = HHI_EACODE do
						eaLabels(i) = EA_NAME;
					endfor;
					i = i + 1;
				endif;
			endfor;
		else
			forcase TM_IND_INT_DICT where IND_TEAM_ID = EXISTING_TEAM_ID do
				//Review codes array to see if the value has already been added
				numeric unqCheck = arrayUnqCheck(eaCodes, IND_EACODE);
			
				//If the value has not been added, add it to the arrays
				if unqCheck = 0 then
					eaCodes(i) = IND_EACODE;
					if countcases(TM_SURV_GEOVARS_DICT where EA_CODE = IND_EACODE) > 1 then
						warning("EA name not unique, using last entry");
					endif;
					forcase TM_SURV_GEOVARS_DICT where EA_CODE = IND_EACODE do
						eaLabels(i) = EA_NAME;
					endfor;
					i = i + 1;
				endif;
			endfor;
		endif;
		eaCodes(i) = "";
		setvalueset($, eaCodes, eaLabels);
	else
		advance to EXISTING_HHID;
	endif;

postproc
	reqCheck($);
	chosenEa = $;
	forcase TM_SURV_GEOVARS_DICT where EA_CODE = $ do
		if chosenProv = "" then
			chosenProv = PROVINCE_CODE
		endif;
		if chosenDist = "" then
			chosenDist = DISTRICT_CODE
		endif;
		if chosenVill = "" then
			chosenVill = VILLAGE_CODE
		endif;
		if chosenProv <> PROVINCE_CODE or chosenDist <> DISTRICT_CODE or chosenVill <> VILLAGE_CODE then
			errmsg("Non-unique EA ID detected in sample file, please notify project staff");
			stop();
		endif;
	endfor;
PROC EXISTING_HHID

onfocus
	//Variables
	numeric i = 1;
	//Clear Codes/Labels arrays of previous values
	clearStringArray(hhCodes);
	clearStringArray(hhLabels);
	
	if HH_MENU = 2 then
		forcase TM_HH_INT_DICT where HHI_TEAM_ID = EXISTING_TEAM_ID  and HHI_EACODE = EXISTING_EA do
			//Review codes array to see if the value has already been added
			numeric unqCheck = arrayUnqCheck(hhCodes, HHI_SHH);
		
			//If the value has not been added, add it to the arrays
			if unqCheck = 0 then
				hhCodes(i) = HHI_SHH;
				hhLabels(i) = HHI_SHH;
				i = i + 1;
			endif;
		endfor;
	else
		forcase TM_IND_INT_DICT where IND_TEAM_ID = EXISTING_TEAM_ID  and IND_EACODE = EXISTING_EA do
			//Review codes array to see if the value has already been added
			numeric unqCheck = arrayUnqCheck(hhCodes, IND_SHH);
		
			//If the value has not been added, add it to the arrays
			if unqCheck = 0 then
				hhCodes(i) = IND_SHH;
				hhLabels(i) = IND_SHH;
				i = i + 1;
			endif;
		endfor;
	endif;
	hhCodes(i) = "";
	setvalueset($, hhCodes, hhLabels);

postproc
	reqCheck($);
	chosenHh = $;
	
	//START INDIVIDUAL INTERIVEWS
	if (INDIV_MENU = 1 and EXISTING_TEAM_ID <> "" and EXISTING_EA <> "" and EXISTING_HHID <> "") then
		launchIndInt();
	endif;

	if (HH_MENU = 2 and EXISTING_TEAM_ID <> "" and EXISTING_EA <> "" and EXISTING_HHID <> "") then
		editHhInt();
	endif;

PROC IND_STATUS_FORM
preproc
	ask if (INDIV_MENU = 2 and EXISTING_TEAM_ID <> "" and EXISTING_EA <> "" and EXISTING_HHID <> "");
PROC IND_STATUS_REVIEW2
preproc
	$ = 1;
	
onfocus
	numeric caseCount = 1;

	forcase TM_SURV_DATA_HUB_DICT where SURV_HUB_TEAM_ID = EXISTING_TEAM_ID and SURV_HUB_EACODE = EXISTING_EA and SURV_HUB_SHH = EXISTING_HHID do
		if caseCount = 1 then
			puRoster = concat(strip(SURV_HUB_HHMEM_ID), " - ", strip(SURV_HUB_NAME), ": ", getvaluelabel(SURV_HUB_STATUS));
			caseCount = caseCount + 1;
		else
			puRoster = concat(puRoster, "<br><br>", concat(strip(SURV_HUB_HHMEM_ID), " - ", strip(SURV_HUB_NAME), ": ", getvaluelabel(SURV_HUB_STATUS)));//concat(SURV_HUB_HHMEM_ID, " - ", SURV_HUB_NAME));
			caseCount = caseCount + 1;
		endif;
	endfor;

postproc
	stop();
