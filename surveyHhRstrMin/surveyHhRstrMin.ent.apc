{Application 'SURVEYHHRSTRMIN' logic file generated by CSPro}
PROC GLOBAL
	// ***USER DEFINED VARIABLES***	
	array string femCodes(99);
	array string femNames(99);
	array string maleCodes(99);
	array string maleNames(99);
	array string hhMemCodes(99);
	array string hhMemNames(99);
	string dispName;

	// ***USER DEFINED FUNCTIONS***
	//CLEAR ARRAY BEFORE RE-USE
	function clearStringArray(array string ar)
		numeric i = 1;
		while i < length(ar) do
			ar(i) = "";
			i = i + 1;
		enddo;
	end;

	//CHECK ARRAY VALUE LIST ARRAY FOR EXISTING VALUES
	//0 = NOT FOUND, 1 = FOUND
	function arrayUnqCheck(array string ar, alpha val)
		numeric foundFlag = 0;
		do varying numeric i = 1 until foundFlag = 1 or i = length(ar, 1)
			if ar(i) = val then
				foundFlag = 1;
			endif;
		enddo;
		arrayUnqCheck = foundFlag;
	end;
	
	function alpha caseLabelSet()
		string tempMemId;
		string tempName;
		string tempAge;
		string tempSex;
		
		loadcase(TM_HH_RSTR_DICT, HHRM_PROVINCE, HHRM_DISTRICT, HHRM_VILLAGE, HHRM_EACODE, HHRM_SHH, HHRM_TEAM_ID, HHRM_HHMEM_ID);

		if strip(HHR_HHMEM_ID) <> "" then
			tempMemID = strip(HHR_HHMEM_ID);
		else
			tempMemId = "No ID entered";
		endif;

		if strip(HHRNAME) <> "" then
			tempName = strip(HHRNAME);
		else
			tempName = "No name entered";
		endif;

		if AGEYEARS <> notappl then
			string ageString = edit("ZZ9", AGEYEARS);
			if ageString[1:1] = " " then
				tempAge = ageString[2];
			else
				tempAge = ageString;
			endif;
		else
			tempAge = "No age entered";
		endif;

		if SEX <> notappl then
			tempSex = getvaluelabel(SEX);
		else
			tempSex = "No sex entered";
		endif;
		
		clear(TM_HH_RSTR_DICT);
		caseLabelSet = maketext("%s - %s (AGE: %s); SEX %s (NOT SYNCED)", tempMemId, tempName, tempAge, tempSex);
	end;

	function updateMinRoster()

		string minRosterPffName = ".\surveyHhRstrMin.pff";
		
		file minRosterPff;
		if setfile(minRosterPff, minRosterPffName, create) = 0 then
			errmsg("Failed to open %s", minRosterPffName);
		endif;
		
		filewrite(minRosterPff, "[Run Information]");
		filewrite(minRosterPff, "Version=CSPro 7.2");
		filewrite(minRosterPff, "AppType=Entry");
		filewrite(minRosterPff, "Description=Household Minor Roster");
	
		filewrite(minRosterPff, "[DataEntryInit]");
		filewrite(minRosterPff, "StartMode=Modify");
		filewrite(minRosterPff, "Lock=Verify, Add");
		filewrite(minRosterPff, "AutoAdd=No");
		filewrite(minRosterPff, "ShowInApplicationListing=Never");
		filewrite(minRosterPff, "CaseListingFilter=^%s.*", concat(HHRM_PROVINCE, HHRM_DISTRICT, HHRM_VILLAGE, HHRM_EACODE, HHRM_SHH, HHRM_TEAM_ID));
	
		filewrite(minRosterPff, "[Files]");
		filewrite(minRosterPff, "Application=.\surveyHhRstrMin.ent");
		filewrite(minRosterPff, "InputData=.\surveyHhRstrMin.csdb|CSPRODB");
		filewrite(minRosterPff, "Paradata=.\surveyHhRstrMin.cslog");
	
		filewrite(minRosterPff, "[ExternalFiles]");
		filewrite(minRosterPff, "TM_HH_RSTR_DICT=..\surveyHhRstr\surveyHhRstr.csdb|CSPRODB");

		filewrite(minRosterPff, "[Parameters]");
		filewrite(minRosterPff, "OnExit=..\surveyHhInt\surveyHhInt.pff");
		filewrite(minRosterPff, "HHRM_EA_DEVICEID_PASS=%s", HHRM_DEVICEID);

		close(minRosterPff);

	end;

	//BUILT IN FUNCTION TO OVERRIDE STOP FUNCTIONALITY, ELIMINATING PROMPTS
	function OnStop()
		if visualvalue(HHRM_DE_START_FLAG) = 1 then
			savepartial();
		endif;
		execpff(".\surveyHhRstrMin.pff", stop);
	end;

PROC SURVEYHHRSTRMIN_FF

PROC TM_HH_RSTR_MIN_LEVEL

preproc
	loadcase(TM_HH_RSTR_DICT, HHRM_PROVINCE, HHRM_DISTRICT, HHRM_VILLAGE, HHRM_EACODE, HHRM_SHH, HHRM_TEAM_ID, HHRM_HHMEM_ID);
	dispName = HHRNAME;

	if sysparm("HHRM_EA_DEVICEID_PASS") <> "" then
		HHRM_DEVICEID = sysparm("HHRM_EA_DEVICEID_PASS");
		setproperty(HHRM_DEVICEID, "Protected", "Yes");
	endif;

	updateMinRoster();

	if demode() <> add and visualvalue(HHRM_DE_START_FLAG) = 1 then
		advance to SUPPORTSCHOOL12;
	endif;
PROC CHENSCH

postproc
	if $ <> notappl then
		HHRM_DE_START_FLAG = 1;
		setcaselabel(TM_HH_RSTR_MIN_DICT, caseLabelSet());
	endif;

PROC MOMHHM

preproc
ask if MOMALIVE = 1;

PROC NATMOMNM

preproc
	ask if MOMHHM = 1;

onfocus
	//Variables
	numeric i = 1;
	//Clear Codes/Labels arrays of previous values
	clearStringArray(femCodes);
	clearStringArray(femNames);
	
	forcase TM_HH_RSTR_DICT where HHR_PROVINCE = HHRM_PROVINCE and HHR_DISTRICT = HHRM_DISTRICT and HHR_VILLAGE = HHRM_VILLAGE and 
	HHR_EACODE = HHRM_EACODE and HHR_SHH = HHRM_SHH and HHR_TEAM_ID = HHRM_TEAM_ID and SEX = 2 do
		//Review codes array to see if the value has already been added
		numeric unqCheck = arrayUnqCheck(femCodes, HHR_HHMEM_ID);
		
		//If the value has not been added, add it to the arrays
		if unqCheck = 0 then
			femCodes(i) = HHR_HHMEM_ID;
			femNames(i) = concat(HHR_HHMEM_ID, " - ", HHRNAME);
			i = i + 1;
		endif;
	endfor;
	femCodes(i) = "";
	setvalueset($, femCodes, femNames);
	clear(TM_HH_RSTR_DICT);
	loadcase(TM_HH_RSTR_DICT, HHRM_PROVINCE, HHRM_DISTRICT, HHRM_VILLAGE, HHRM_EACODE, HHRM_SHH, HHRM_TEAM_ID, HHRM_HHMEM_ID);

PROC FEMGUARDHHM

preproc
ask if MOMALIVE <> 1 or MOMHHM <> 1;
PROC MOMFEMNAME

preproc
	ask if FEMGUARDHHM = 1;

onfocus
	//Variables
	numeric i = 1;
	//Clear Codes/Labels arrays of previous values
	clearStringArray(femCodes);
	clearStringArray(femNames);
	
	forcase TM_HH_RSTR_DICT where HHR_PROVINCE = HHRM_PROVINCE and HHR_DISTRICT = HHRM_DISTRICT and HHR_VILLAGE = HHRM_VILLAGE and 
	HHR_EACODE = HHRM_EACODE and HHR_SHH = HHRM_SHH and HHR_TEAM_ID = HHRM_TEAM_ID and SEX = 2 do
		//Review codes array to see if the value has already been added
		numeric unqCheck = arrayUnqCheck(femCodes, HHR_HHMEM_ID);
		
		//If the value has not been added, add it to the arrays
		if unqCheck = 0 then
			femCodes(i) = HHR_HHMEM_ID;
			femNames(i) = concat(HHR_HHMEM_ID, " - ", HHRNAME);
			i = i + 1;
		endif;
	endfor;
	femCodes(i) = "";
	setvalueset($, femCodes, femNames);
	clear(TM_HH_RSTR_DICT);
	loadcase(TM_HH_RSTR_DICT, HHRM_PROVINCE, HHRM_DISTRICT, HHRM_VILLAGE, HHRM_EACODE, HHRM_SHH, HHRM_TEAM_ID, HHRM_HHMEM_ID);

PROC DADHHM

preproc
ask if DADALIVE = 1;
PROC DADMALENAME

preproc
ask if DADHHM = 1;

onfocus
	//Variables
	numeric i = 1;
	//Clear Codes/Labels arrays of previous values
	clearStringArray(maleCodes);
	clearStringArray(maleNames);
	
	forcase TM_HH_RSTR_DICT where HHR_PROVINCE = HHRM_PROVINCE and HHR_DISTRICT = HHRM_DISTRICT and HHR_VILLAGE = HHRM_VILLAGE and 
	HHR_EACODE = HHRM_EACODE and HHR_SHH = HHRM_SHH and HHR_TEAM_ID = HHRM_TEAM_ID and SEX = 1 do
		//Review codes array to see if the value has already been added
		numeric unqCheck = arrayUnqCheck(maleCodes, HHR_HHMEM_ID);
		
		//If the value has not been added, add it to the arrays
		if unqCheck = 0 then
			maleCodes(i) = HHR_HHMEM_ID;
			maleNames(i) = concat(HHR_HHMEM_ID, " - ", HHRNAME);
			i = i + 1;
		endif;
	endfor;
	maleCodes(i) = "";
	setvalueset($, maleCodes, maleNames);
	clear(TM_HH_RSTR_DICT);
	loadcase(TM_HH_RSTR_DICT, HHRM_PROVINCE, HHRM_DISTRICT, HHRM_VILLAGE, HHRM_EACODE, HHRM_SHH, HHRM_TEAM_ID, HHRM_HHMEM_ID);

PROC MALEGUARDHHM

preproc
ask if DADALIVE <> 1 or DADHHM <> 1;
PROC MALEGUARDNAME

preproc
ask if MALEGUARDHHM = 1;

onfocus
	//Variables
	numeric i = 1;
	//Clear Codes/Labels arrays of previous values
	clearStringArray(maleCodes);
	clearStringArray(maleNames);
	
	forcase TM_HH_RSTR_DICT where HHR_PROVINCE = HHRM_PROVINCE and HHR_DISTRICT = HHRM_DISTRICT and HHR_VILLAGE = HHRM_VILLAGE and 
	HHR_EACODE = HHRM_EACODE and HHR_SHH = HHRM_SHH and HHR_TEAM_ID = HHRM_TEAM_ID and SEX = 1 do
		//Review codes array to see if the value has already been added
		numeric unqCheck = arrayUnqCheck(maleCodes, HHR_HHMEM_ID);
		
		//If the value has not been added, add it to the arrays
		if unqCheck = 0 then
			maleCodes(i) = HHR_HHMEM_ID;
			maleNames(i) = concat(HHR_HHMEM_ID, " - ", HHRNAME);
			i = i + 1;
		endif;
	endfor;
	maleCodes(i) = "";
	setvalueset($, maleCodes, maleNames);
	clear(TM_HH_RSTR_DICT);
	loadcase(TM_HH_RSTR_DICT, HHRM_PROVINCE, HHRM_DISTRICT, HHRM_VILLAGE, HHRM_EACODE, HHRM_SHH, HHRM_TEAM_ID, HHRM_HHMEM_ID);

PROC HHCCONSEL

onfocus
	//Variables
	numeric i = 1;
	//Clear Codes/Labels arrays of previous values
	clearStringArray(hhMemCodes);
	clearStringArray(hhMemNames);
	
	forcase TM_HH_RSTR_DICT where HHR_PROVINCE = HHRM_PROVINCE and HHR_DISTRICT = HHRM_DISTRICT and HHR_VILLAGE = HHRM_VILLAGE and  //LOOPS THROUGH EACH CASE THAT MEETS THE CRITERIA
	HHR_EACODE = HHRM_EACODE and HHR_SHH = HHRM_SHH and HHR_TEAM_ID = HHRM_TEAM_ID and (AGEYEARS >= 18 or (AGEYEARS <= 17 and EMANCIPATED = 1)) do//THIS IS THE CRITERIA
		//Review codes array to see if the value has already been added
		numeric unqCheck = arrayUnqCheck(hhMemCodes, HHR_HHMEM_ID); //THIS CHECKS TO SEE IF CODE VALUE HAS ALREADY BEEN ADDED TO ARRAY
		
		//If the value has not been added, add it to the arrays
		if unqCheck = 0 then
			hhMemCodes(i) = HHR_HHMEM_ID;
			hhMemNames(i) = concat(HHR_HHMEM_ID, " - ", HHRNAME);
			i = i + 1;
		endif;
	endfor;  //AT THIS POINT IT HAS GONE THROUGH ALL POTENTIAL CASES AND ADDED UNIQUE ONES TO THE ARRAY
	
	//ADD ADDTIONAL VALUES TO ARRAY HERE
	hhMemCodes(i) = "0";
	hhMemNames(i) = "NONE";
	i = i + 1;
	
	hhMemCodes(i) = "";	//THIS ADDS 'CLOSING' NOTATION TO THE CODE ARRAY SO PROGRAM KNOWS IT IS DONE
	setvalueset($, hhMemCodes, hhMemNames);
	clear(TM_HH_RSTR_DICT);
	loadcase(TM_HH_RSTR_DICT, HHRM_PROVINCE, HHRM_DISTRICT, HHRM_VILLAGE, HHRM_EACODE, HHRM_SHH, HHRM_TEAM_ID, HHRM_HHMEM_ID);

PROC HHEMANC

preproc
	ask if AGEYEARs  >= 15 and AGEYEARS <= 17 and EMANCIPATED = 2;
	
postproc
	if $ = 2 then
		errmsg("This child does have an adult or parent/guardian who lives in the household and can give permission.  Please go back and revise the responses that are incorrect.");
		reenter;
	endif;
PROC MOMSICK

preproc
ask if MOMALIVE = 1;
PROC MOMAIDS

preproc
ask if MOMALIVE = 1 and MOMSICK = 1;
PROC DADSICK

preproc
ask if DADALIVE = 1;
PROC DADAIDS


preproc
ask if DADALIVE = 1 and DADSICK = 1;

PROC OVC_SUPPORT_LEVEL_FORM

preproc
	//ask if SICK3MO = 1 or MOMALIVE = 2 or MOMSICK = 1 or MOMAIDS = 1 or DADALIVE = 2 or DADSICK = 1 or DADAIDS = 1 or (AGEYEARS >= 15 and HHEMANC = 2) or AGEYEARS < 15;

//removed message, changed to display screen "OVC_SUPPORTN1"  SB 20190808
// take a look
ask if SICK3MO = 1 or MOMALIVE = 2 or MOMSICK = 1 or MOMAIDS = 1 or 
DADALIVE = 2 or DADSICK = 1 or DADAIDS = 1 or (AGEYEARS >= 18 or (ageyears in 15:17) and HHEMANC = 2);
PROC OVC_SUPPORTN1


preproc
	$ = "A";
PROC SUPPORTMED12


PROC SUPPORTEMOT12

PROC SUPPORTEMOT3

preproc
ask if SUPPORTEMOT12 =1; 
PROC SUPPORTMATER3

preproc
ask if SUPPORTMATER12 = 1; 
PROC SUPPORTSOCIAL3

preproc
ask if SUPPORTSOCIAL12 = 1;
PROC SUPPORTSCHOOL12

preproc

//will need to check what the roster age variable is
ask if AGEYEARS >= 5;
