{Application 'SURVEYINDINT' logic file generated by CSPro}
PROC GLOBAL

// *** USER DEFINED VARIABLES ***
	string adjustedPath;

	// SPEC'D CVDs
	numeric eligstat_ADULT = 0;
	numeric eligstat_PARENT = 0;
	numeric eligstat_CHILD = 0;
	numeric constat_ADULT = 0;
	numeric constat_PARENT = 0;
	numeric constat_CHILD = 0;
	numeric confagey;
	numeric confgend;
	numeric confeman;
	numeric confageysource;
	numeric preferredNumber;
	numeric HIVSTATUS;
	numeric HIVSTATUS_2T;
	numeric HIVSTATUS_3T;
	
	// ADDITIONAL CVDs
	string constatLabel = "UNDETERMINED";
	string constat_PARENTLabel = "UNDETERMINED";
	string constat_CHILDLabel = "UNDETERMINED";
	string constat_ADULTLabel = "UNDETERMINED";
	numeric pullAgeYears;
	numeric pullEmancipated;
	numeric pullSex;
	string pullSexLabel;
	string pullName;
	array string nameCodes (100);
	array string nameLabels (100);
	numeric unxAEAGECHANGETS = 0;
	numeric unxPEAGECHANGETS = 0;
	numeric unxCEAGECHANGETS = 0;
	numeric currentDate;

// *** USER DEFINED FUNCTIONS ***

	// FIND DATE AND TIME. FORMAT: YYYYMMDD HH:MM:SS
	function string FindDateTime()
		string startTime = edit("99:99:99",systime());
		string startDate = edit("99999999",sysdate("YYYYMMDD"));
		FindDateTime = startDate + " " + startTime;
	end;	
	
	// ENSURE ONLY ONE ANSWER IS SELECTED IF "DON'T KNOW" OR "REFUSED"
	function DkRefOnly(alpha alphval)
		if ("YZ" in alphval and (length(alphval) >= 2)) then
			errmsg("'DON’T KNOW' and 'REFUSED' cannot be selected with any other category.");
		endif;
	end;
	
	//CLEAR ARRAY BEFORE RE-USE
	function clearStringArray(array string ar)
		numeric i = 1;
		while i < length(ar) do
			ar(i) = "";
			i = i + 1;
		enddo;
	end;
	
	// CLEAR NUMERIC ARRAY BEFORE RE-USE
	function clearNumericArray(array numeric ar)
		numeric i = 1;
		while i < length(ar) do
			ar(i) = 0;
			i = i +1;
		enddo;
	end;
	
	//CHECK GEOVAR VALUE LIST ARRAY FOR EXISTING VALUES
	//0 = NOT FOUND, 1 = FOUND
	function NameUnqCheck(array string ar, alpha val)
		numeric foundFlag = 0;
		do varying numeric i = 1 until foundFlag = 1 or i = length(ar, 1)
			if ar(i) = val then
				foundFlag = 1;
			endif;
		enddo;
		NameUnqCheck = foundFlag;
	end;

	//--==ELIG AND CONSENT FUNCTIONS==--
	//NOTE: ORDER MATTERS. FOR A FUNCTION TO CALL ANOTHER FUNCTION THE CALLED FUNCTION MUST ALREADY BE LOADED, AND SO MUST COME BEFORE THE CALLING FUNCTION IN ORDER
	//NOTE: IF PERFORMANCE ISSUES, DOWNSTREAM FUNCTION RE-RUNS CAN BE MADE CONDITIONAL ON VALUE CHANGE, RIGHT NOW THEY RUN EVERY CALL
	//NOTE:  THESE SHOULD ALL SET GLOBAL VARS WITHIN THE FUNCTION RATHER THAN RETURNING, SO THEY CAN CALL ADDITIONAL FUNCTIONS AFTER THAT WILL UTILIZE THE GLOBAL VAR THEY JUST SET

	//CALC CONSTAT
	function overallConsentStatus()
		if ((confagey >= 18 or (confagey >= 15 and confeman = 1)) and constat_ADULT = 99) or (((confagey in 14:18) and confeman = 2) and constat_CHILD = 99) then
			CONSTAT = 99; //INELIGIBLE
			constatLabel = "INELIGIBLE";
		elseif ((confagey >= 18 or (confagey >= 15 and confeman = 1)) and constat_ADULT = 2) or (((confagey in 14:18) and confeman = 2) and constat_CHILD = 2) then
			CONSTAT = 2; //NOT CONSENTED
			constatLabel = "NOT CONSENTED";
		elseif ((confagey >= 18 or (confagey >= 15 and confeman = 1)) and constat_ADULT = 1) or (((confagey in 14:18) and confeman = 2) and constat_CHILD = 1) then
			CONSTAT = 1; //CONSENTED
			constatLabel = "CONSENTED";
		else
			CONSTAT = 0; //UNDETERMINED CONSENT
			constatLabel = "UNDETERMINED";
		endif;
	end;

	//CALC constat_ADULT
	function adultConsentStatus()
		if (confagey >= 18 or (confagey >= 15 and confeman = 1)) and (eligstat_ADULT = 99 or eligstat_ADULT = notappl) then
			constat_ADULT = 99; //INELIGIBLE
			constat_ADULTLabel = "INELIGIBLE";
		elseif (confagey >= 18 or (confagey >= 15 and confeman = 1)) and eligstat_ADULT = 1 and visualvalue(INAGREEIN) = 2 then 
			constat_ADULT = 2; //NOT CONSENTED
			constat_ADULTLabel = "NOT CONSENTED";
		elseif (confagey >= 18 or (confagey >= 15 and confeman = 1)) and eligstat_ADULT = 1 and visualvalue(INAGREEIN) = 1 then 
			constat_ADULT = 1; //CONSENTED
			constat_ADULTLabel = "CONSENTED";
		else
			constat_ADULT = 0; //UNDETERMINED CONSENT
			constat_ADULTLabel = "UNDETERMINED";
		endif;
		//RECALCULATE BASED ON NEW STATUS
		overallConsentStatus();
	end;

	//CALC constat_CHILD
	function childConsentStatus()
		if confagey in 14:18 and confeman = 2 and (constat_PARENT = 2 or constat_PARENT = 99 or constat_PARENT = notappl or 
		eligstat_CHILD = 99 or eligstat_CHILD = notappl) then
			constat_CHILD = 99; //INELIGIBLE
			constat_CHILDLabel = "INELIGIBLE";
		elseif confagey in 14:18 and confeman = 2 and eligstat_CHILD = 1 and constat_PARENT = 1 and visualvalue(ASOAGREE) = 2 then 
			constat_CHILD = 2; //NOT CONSENTED
			constat_CHILDLabel = "NOT CONSENTED";
		elseif confagey in 14:18 and confeman = 2 and eligstat_CHILD = 1 and constat_PARENT = 1 and visualvalue(ASOAGREE) = 1 then
			constat_CHILD = 1; //CONSENTED 
			constat_CHILDLabel = "CONSENTED";
		else
			constat_CHILD = 0; //UNDETERMINED CONSENT
			constat_CHILDLabel = "UNDETERMINED";
		endif;
		//RECALCULATE BASED ON NEW STATUS
		overallConsentStatus();
	end;

	//CALC constat_PARENT
	function parentConsentStatus()
		if confagey in 14:18 and confeman = 2 and (eligstat_PARENT = 99 or eligstat_PARENT = notappl) then
			constat_PARENT = 99; //INELIGIBLE
			constat_PARENTLabel = "INELIGIBLE";
		elseif confagey in 14:18 and confeman = 2 and eligstat_PARENT = 1 and visualvalue(PPRMAGREE) = 2 then
			constat_PARENT = 2; //NOT CONSENTED
			constat_PARENTLabel = "NOT CONSENTED";
		elseif confagey in 14:18 and confeman = 2 and eligstat_PARENT = 1 and visualvalue(PPRMAGREE) = 1 then
			constat_PARENT = 1; //CONSENTED
			constat_PARENTLabel = "CONSENTED";
		else
			constat_PARENT = 0; //UNDETERMINED CONSENT
			constat_PARENTLabel = "UNDETERMINED";
		endif;
		//RECALCULATE BASED ON NEW STATUS
		childConsentStatus();
	end;

	// CALC eligstat_ADULT
	function FindEligStatAdult()
		if (visualvalue(ACCHEAR) = 2 and (visualvalue(ACCOM1) = 2 or visualvalue(ACCOM1) = notappl)) or visualvalue(ACCLANG) = 2 or visualvalue(ACCCOGNITIVE) = 2 or 
		visualvalue(AGEELIGY) <15 or visualvalue(ACCHEAR) = notappl or visualvalue(ACCLANG) = notappl or visualvalue(ACCCOGNITIVE) = notappl or visualvalue(AGECHECKYN) = notappl then
			eligstat_ADULT = 99; //INELIGIBLE
		elseif confagey in 14:18 and visualvalue(INEEMAN) = 2 then
			eligstat_ADULT = 88;//AGE CHANGE
		elseif (visualvalue(ACCHEAR) = 1 or visualvalue(ACCOM1) = 1) and visualvalue(ACCLANG) = 1 and visualvalue(ACCCOGNITIVE) = 1 and (visualvalue(AGECHECKYN) = 1 or visualvalue(AGEELIGY) >= 18 or (visualvalue(AGEELIGY) >= 15 and visualvalue(INEEMAN) = 1)) then
			eligstat_ADULT = 1;//ELIGIBLE
		else
			eligstat_ADULT = 0; //UNDETERMINED ELIGIBILITY
		endif;
		//RECALCULATE BASED ON NEW STATUS
		adultConsentStatus();
	end;

	// CALC eligstat_CHILD
	function FindEligStatChild()
		if (visualvalue(CHEHEARING) = 2 and (visualvalue(CHEHEARACM) = 2 or visualvalue(CHEHEARACM) = notappl)) or visualvalue(CHELANGACC) = 2 or 
		visualvalue(CHECOGN) = 2 or visualvalue(CHEAGEC) < 15 or visualvalue(CHEHEARING) = notappl or visualvalue(CHELANGACC) = notappl or 
		visualvalue(CHECOGN) = notappl or visualvalue(CHEAGE) = notappl then
			eligstat_CHILD = 99; //INELIGIBLE
		elseif visualvalue(CHEAGEC) >= 18 or ((confagey in 14:18) and visualvalue(CHEEMAN) = 1) then
			eligstat_CHILD = 88; //AGE CHANGE
		elseif (visualvalue(CHEHEARING) = 1 or visualvalue(CHEHEARACM) = 1) and visualvalue(CHELANGACC) = 1 and visualvalue(CHECOGN) = 1 and 
		(visualvalue(CHEAGE) = 1 or (visualvalue(CHEAGEC) in 14:18 and visualvalue(CHEEMAN) = 2)) then
			eligstat_CHILD = 1; //ELIGIBLE
		else
			eligstat_CHILD = 0; //UNDETERMINED ELIGIBILITY
		endif;
		//RECALCULATE BASED ON NEW STATUS
		childConsentStatus();
	end;

	//CALC eligstat_PARENT
	function parentEligStatus()
		if (visualvalue(PPCHEHEARING) = 2 and (visualvalue(PPCHEHEARACM) = 2 or visualvalue(PPCHEHEARACM) = notappl)) or 
		visualvalue(PPCHELANGACC) = 2 or visualvalue(PPCHECOGN) = 2 or visualvalue(PPCHEAGEC) < 15 or visualvalue(PPCHEHEARING) = notappl or 
		visualvalue(PPCHELANGACC) = notappl or visualvalue(PPCHECOGN) = notappl or visualvalue(PPCHEAGE) = notappl then 
			eligstat_PARENT = 99; //INELIGIBLE
		elseif visualvalue(PPCHEAGEC) >= 18  then
			eligstat_PARENT = 88; //AGE CHANGE
		elseif confagey in 14:18 and visualvalue(PPCHEEMAN) = 1 then 
			eligstat_PARENT = 88; //AGE CHANGE
		elseif (visualvalue(PPCHEHEARING) = 1 OR visualvalue(PPCHEHEARACM) = 1) and visualvalue(PPCHELANGACC) = 1 and visualvalue(PPCHECOGN) = 1 and 
		(visualvalue(PPCHEAGE) = 1 or (visualvalue(PPCHEAGEC) in 14:18 and visualvalue(PPCHEEMAN) = 2)) then 
			eligstat_PARENT = 1; //ELIGIBLE
		else
			eligstat_PARENT = 0; //UNDETERMINED ELIGIBILITY
		endif;
		//RECALCULATE BASED ON NEW STATUS
		parentConsentStatus();
	end;

	// CALC CONFGEND
	function FindConfgend()
		if (confagey >= 18 or (confagey >= 15 and confeman = 1)) and visualvalue(INEGEND) = 1 then
			confgend = pullSex; //SEX FROM ROSTER
		elseif confagey in 14:18 and confeman = 2 and visualvalue(PPCHEGEND) = 1 and visualvalue(CHEGEND) = 1 then
			confgend = pullSex; //SEX FROM ROSTER
		elseif (confagey >= 18 or (confagey >= 15 and confeman = 1)) and visualvalue(INEGEND) = 2 then
			confgend = visualvalue(INEGENDC); //SEX FROM ADULT ELIG
		elseif confagey in 14:18 and confeman = 2 and visualvalue(PPCHEGEND) = 2 and visualvalue(CHEGEND) = 1 then
			confgend = visualvalue(PPCHEGENDC); //SEX FROM PARENT ELIG
		elseif confagey in 14:18 and confeman = 2 and visualvalue(PPCHEGEND) = 1 and visualvalue(CHEGEND) = 2 then
			confgend = visualvalue(CHEGENDC); // SEX FROM CHILD ELIG
		else
			confgend = 0; //GENDER NOT FOUND
		endif;
	end;

	//CALC CONFEMAN
	function confEmanStatus()
		if confagey >= 18 then
			confeman = 95;
		elseif confagey < 15 then 
			confeman = 94;
		elseif confagey >= 15 and confagey < 18 and pullEmancipated = notappl and 
		visualvalue(INEEMAN) = notappl and visualvalue(PPCHEEMAN) = notappl and visualvalue(CHEEMAN) = notappl then
			confeman = 93;
		elseif confagey >= 15 and confagey < 18 then 
			if (pullEmancipated <> notappl or visualvalue(INEEMAN) <> notappl or visualvalue(PPCHEEMAN) <> notappl or visualvalue(CHEEMAN) <> notappl) then
				if (pullEmancipated = notappl or pullEmancipated = 1) and 
				(visualvalue(INEEMAN) = notappl or visualvalue(INEEMAN) = 1) and 
				(visualvalue(PPCHEEMAN) = notappl or visualvalue(PPCHEEMAN) = 1) and 
				(visualvalue(CHEEMAN) = notappl or visualvalue(CHEEMAN) = 1) then 
					confeman = 1;
				elseif (pullEmancipated = notappl or pullEmancipated = 2) and 
				(visualvalue(INEEMAN) = notappl or visualvalue(INEEMAN) = 2) and 
				(visualvalue(PPCHEEMAN) = notappl or visualvalue(PPCHEEMAN) = 2) and 
				(visualvalue(CHEEMAN) = notappl or visualvalue(CHEEMAN) = 2) then 
					confeman = 2;
				endif;
			elseif pullEmancipated = 1 or visualvalue(INEEMAN) = 1 or visualvalue(PPCHEEMAN) = 1 or visualvalue(CHEEMAN) = 1 then
				if pullEmancipated = 2 or visualvalue(INEEMAN) = 2 or visualvalue(PPCHEEMAN) = 2 or visualvalue(CHEEMAN) = 2 then
					if confageysource = 2 then 
						confeman = visualvalue(INEEMAN);
					elseif confageysource = 3 then
						confeman = visualvalue(PPCHEEMAN);
					elseif confageysource = 4 then
						confeman = visualvalue(CHEEMAN);
					endif;
				endif;
			endif;
		else
			confeman = 999;
		endif;

		//RECALCULATE BASED ON NEW STATUS
		FindConfgend();
		parentConsentStatus();
		adultConsentStatus();
	end;


	// CALC CONFAGEY
	function FindConfagey()
		if confageysource = 1 then
			confagey = pullAgeYears; //ROSTER
		elseif confageysource = 2 then
			if visualvalue(AGECHECKYN) = 1 then
				confagey = pullAgeYears; //ROSTER
			elseif visualvalue(AGECHECKYN) = 2 then
				confagey = visualvalue(AGEELIGY); //ADULT ELIG
			endif;
		elseif confageysource = 3 then
			if visualvalue(PPCHEAGE) = 1 then
				confagey = pullAgeYears; //ROSTER
			elseif visualvalue(PPCHEAGE) = 2 then
				confagey = visualvalue(PPCHEAGEC); //PARENT ELIG
			endif;
		elseif confageysource = 4 then
			if visualvalue(CHEAGE) = 1 and visualvalue(PPCHEAGE) = 1 then
				confagey = pullAgeYears; //ROSTER
			elseif visualvalue(CHEAGE) = 1 and visualvalue(PPCHEAGE) = 2 then
				confagey = visualvalue(PPCHEAGEC); //PARENT ELIG
			elseif visualvalue(CHEAGE) = 2 then
				confagey = visualvalue(CHEAGEC); //CHILD ELIG
			endif;
		else
			confagey = 999; //ERROR
		endif;

		//RECALCULATE BASED ON NEW STATUS
		confEmanStatus();
		FindEligStatAdult();
		parentEligStatus();
		FindEligStatChild();
	end;

	// CALC CONFAGEYSOURCE
	function FindConfageysource()
		array numeric unxTimesAr(3);
		unxTimesAr(1) = unxAEAGECHANGETS;
		unxTimesAr(2) = unxPEAGECHANGETS;
		unxTimesAr(3) = unxCEAGECHANGETS;
		numeric arrayMax = high(unxTimesAr(1), unxTimesAr(2), unxTimesAr(3));
		if (visualvalue(AGECHECKYN) = 1 or visualvalue(AGECHECKYN) = notappl) and (visualvalue(PPCHEAGE) = 1 or visualvalue(PPCHEAGE) = notappl) and (visualvalue(CHEAGE) = 1 or visualvalue(CHEAGE) = notappl) then
			confageysource = 1;
		elseif unxTimesAr(1) = arrayMax then
			confageysource = 2;
		elseif unxTimesAr(2) = arrayMax then
			confageysource = 3;
		elseif unxTimesAr(3) = arrayMax then
			confageysource = 4;
		endif;
		
		//RECALCULATE BASED ON NEW STATUS
		FindConfagey();
	end;
	//--==END ELIG AND CONSENT FUNCTIONS==--


	// REQUIRE ENTRY FOR ALPHA VARIABLES
	function reqEntryAlpha(string alphvar)
		if alphvar = "" then
			errmsg("Sorry! This response is required.");
			reenter;
		endif;
	end;

	// CALC HIVSTATUS
	function FindHivStatus()
		if HIVSTATUS_2T <> notappl and HIVSTATUS_3T <> notappl then
			HIVSTATUS = 92;
		elseif HIVSTATUS_2T = notappl and HIVSTATUS_3T = notappl then
			HIVSTATUS = 90;
		elseif HIVSTATUS_2T <> notappl and HIVSTATUS_3T = notappl then
			HIVSTATUS = HIVSTATUS_2T;
		elseif HIVSTATUS_3T <> notappl and HIVSTATUS_2T = notappl then
			HIVSTATUS = HIVSTATUS_3T;
		endif;
	end;
	
	//RETURN CASE LABEL TEXT
	function string caseLabelSet()
		string tempMemId;
		string tempName;
		string tempAge;
		string tempSex;

		if strip(IND_HHMEM_ID) <> "" then
			tempMemID = strip(IND_HHMEM_ID);
		else
			tempMemId = "No ID entered";
		endif;

		if strip(INNAME) <> "" then
			tempName = strip(INNAME);
		else
			tempName = "No name entered";
		endif;

		if pullAgeYears <> notappl then
			string ageString = edit("ZZ9", pullAgeYears);
			if ageString[1:1] = " " then
				tempAge = ageString[2];
			else
				tempAge = ageString;
			endif;
		else
			tempAge = "No age entered";
		endif;

		if pullSexLabel <> "" then
			tempSex = pullSexLabel;
		else
			tempSex = "No sex entered";
		endif;

		caseLabelSet = maketext("%s - %s (AGE: %s); SEX %s (NOT SYNCED)", tempMemId, tempName, tempAge, tempSex)
	end;

	//UPDATE INDIV INT FOR EXIT
	function updateIndInt()

		string indIntPffName = ".\surveyIndInt.pff";
		
		file indIntPff;
		if setfile(indIntPff, indIntPffName, create) = 0 then
			errmsg("Failed to open %s", indIntPffName);
		endif;
		
		filewrite(indIntPff, "[Run Information]");
		filewrite(indIntPff, "Version=CSPro 7.2");
		filewrite(indIntPff, "AppType=Entry");
		filewrite(indIntPff, "Description=Individual Interview");
	
		filewrite(indIntPff, "[DataEntryInit]");
		filewrite(indIntPff, "StartMode=Modify");
		filewrite(indIntPff, "Lock=Verify, Add");
		filewrite(indIntPff, "AutoAdd=No");
		filewrite(indIntPff, "ShowInApplicationListing=Never");
		filewrite(indIntPff, "CaseListingFilter=^%s.*", concat(IND_PROVINCE, IND_DISTRICT, IND_VILLAGE, IND_EACODE, IND_SHH, IND_TEAM_ID));
	
		filewrite(indIntPff, "[Files]");
		filewrite(indIntPff, "Application=.\surveyIndInt.ent");
		filewrite(indIntPff, "InputData=.\surveyIndInt.csdb|CSPRODB");
		filewrite(indIntPff, "Paradata=.\surveyIndInt.cslog");
	
		filewrite(indIntPff, "[ExternalFiles]");
		filewrite(indIntPff, "TM_SURV_DATA_HUB_DICT=..\shared\tmSurveyDataHub.csdb|CSPRODB");
		filewrite(indIntPff, "TM_HH_MEM_PASS_DICT=..\shared\tmHhMemPass.csdb|CSPRODB");
		filewrite(indIntPff, "TM_BARCODES_DICT=..\shared\tmBarcodesScans.csdb|CSPRODB");
		filewrite(indIntPff, "TM_SURVEYSIG_DICT=..\shared\tmSurveySignatures.csdb|CSPRODB");
	
		filewrite(indIntPff, "[Parameters]");
		filewrite(indIntPff, "OnExit=..\surveyHhInt\surveyHhInt.pff");
		filewrite(indIntPff, "IND_EA_DEVICEID_PASS=%s",IND_HHI_UUID);

		close(indIntPff);
	end;
	
//APPEARS TO NOT EXIST ANYMORE - COMMMENTING OUT DELETE IF OK - JI 20190806 
//PROC LOCCONT
//
//	if LOCCONT = 1 and (INCONBIO = 1 or INFUTCON = 1 or ASYFUTR = 1 or ASYBIOGT = 1) then
//		skip to LOCSTAFFID;
//	else
//		skip to ENDSURVEY;
//	endif;

	function extCapture(string mode, string prefix)
		
		//CREATE UUID FOR LINKING IMG BETWEEN APPS
		string extLink = uuid();
		string extRequestName = "/sdcard/csentry/temp/external_tool_info.txt";
		string outputFileName = "/sdcard/csentry/temp/phia-android-results";
		string fullOutputFileName = outputFileName + ".txt";
		string line;
		numeric runStatus;
		
		//DELETE PREVIOUS FILE
		filedelete(pathname(cspro) + "temp/phia-android-results.txt");

		//WRITE PARAMETERS FOR CAPTURE APP TO READ
		file extRequest;
		if setfile(extRequest, extRequestName, create) = 0 then
			errmsg("Failed to open %s", extRequestName);
		endif;
		filewrite(extRequest,"Guid=%s", extLink);
		filewrite(extRequest, "OperationToExecute=%s", mode);
		if mode = "signature_capture" then
			filewrite(extRequest, "SignatureFileName=%s", prefix);
		endif;
		filewrite(extRequest, "OutputFilePath=%s", outputFileName);
	
		close(extRequest);

		execsystem("app:com.westat.PHIA_App");
	end;

	//READ RESULTS OF EXTERNAL APP RUN
	function string extRead(string mode);
		string outputDir = "/sdcard/csentry/temp";
		string outputFileName = "/sdcard/csentry/temp/phia-android-results";
		string fullOutputFileName = outputFileName + ".txt";
		string line;
		string capturePass;
		
		if direxist(outputDir) = 0 then
			dircreate(outputDir);
		endif;

		numeric i = 1;

		file outputFile;
		if setfile(outputFile, fullOutputFileName, update) = 0 then
			errmsg("Failed to open %s", fullOutputFileName);
		endif;

		if mode = "signature_capture" then
			clear(TM_SURVEYSIG_DICT);

			while fileread(outputFile, line) do
				if i = 1 then
					SS_RECID = line;
					i = i + 1;
				elseif i = 2 then
					SIGIMGNAME = line;
					capturePass = line;
					i = i + 1;
				else
					next;
				endif;
			enddo;
			SS_CASEID = IND_HHI_UUID;
			SIGSYNCSTATUS = 1;
			writecase(TM_SURVEYSIG_DICT);	
			clear(TM_SURVEYSIG_DICT);
		elseif mode = "barcode_scan" then
			clear(TM_BARCODES_DICT);

			while fileread(outputFile, line) do
				if i = 1 then
					BC_RECID = line;
					i = i + 1;
				elseif i = 2 then
					BARCODE_DATA = line;
					capturePass = line;
					i = i + 1;
				else
					next;
				endif;
			enddo;
			BC_CASEID = IND_HHI_UUID;
			SIGSYNCSTATUS = 1;
			writecase(TM_BARCODES_DICT);	
			clear(TM_BARCODES_DICT);
		endif;
	extRead = capturePass;
	end;

	//BUILT IN FUNCTION TO OVERRIDE STOP FUNCTIONALITY, ELIMINATING PROMPTS
	function OnStop()
		if visualvalue(IND_DE_START_FLAG) = 1 then
			savepartial();
		endif;
		//savepartial();
		execpff(".\surveyIndInt.pff", stop);
	end;
 
PROC SURVEYINDINT_FF

PROC TM_IND_INT_LEVEL

preproc
	adjustedPath = pathname(Application)[1:pos("/surveyIndInt/", pathname(Application))];

	//SET IT SO ON SCREEN MULTI-ITEMS CAN BE LEFT BLANK
	setproperty(LIVETIMENUM, "CanEnterNotAppl","NoConfirm");
	setproperty(LIVETIME, "CanEnterNotAppl","NoConfirm");
	setproperty(LIVETIMEDK, "CanEnterNotAppl","NoConfirm");
	setproperty(MONTHWHENY, "CanEnterNotAppl","NoConfirm");
	setproperty(MONTHTIMES, "CanEnterNotAppl","NoConfirm");
	setproperty(AGEMAR, "CanEnterNotAppl","NoConfirm");
	setproperty(AGEMARDK, "CanEnterNotAppl","NoConfirm");
	setproperty(NUMWIF, "CanEnterNotAppl","NoConfirm");
	setproperty(NUMWIFDK, "CanEnterNotAppl","NoConfirm");
	setproperty(WIFLIVEEW, "CanEnterNotAppl","NoConfirm");
	setproperty(NEWNAME, "CanEnterNotAppl","NoConfirm");
	setproperty(NEWHNAME, "CanEnterNotAppl","NoConfirm");
	setproperty(NEWHNAMEDK, "CanEnterNotAppl","NoConfirm");
	setproperty(HUSNWIF, "CanEnterNotAppl","NoConfirm");
	setproperty(HUSNWIFDK, "CanEnterNotAppl","NoConfirm");
	setproperty(LIVEB, "CanEnterNotAppl","NoConfirm");
	setproperty(LIVEBDK, "CanEnterNotAppl","NoConfirm");
	setproperty(CHILDA2012, "CanEnterNotAppl","NoConfirm");
	setproperty(CHILDA2012DK, "CanEnterNotAppl","NoConfirm");
	setproperty(BIRTHYR, "CanEnterNotAppl","NoConfirm");
	setproperty(BIRTHDK, "CanEnterNotAppl","NoConfirm");
	setproperty(DEATHAGEYR, "CanEnterNotAppl","NoConfirm");
	setproperty(DEATHAGEYRDK, "CanEnterNotAppl","NoConfirm");
	setproperty(DEATHAGEMO, "CanEnterNotAppl","NoConfirm");
	setproperty(DEATHAGEMODK, "CanEnterNotAppl","NoConfirm");
	setproperty(CHTSTHIVAGENUM, "CanEnterNotAppl","NoConfirm");
	setproperty(CHTSTHIVAGE, "CanEnterNotAppl","NoConfirm");
	setproperty(CHTSTHIVAGEDK, "CanEnterNotAppl","NoConfirm");
	setproperty(CHTSTHIVAGELASTNUM, "CanEnterNotAppl","NoConfirm");
	setproperty(CHTSTHIVAGELAST, "CanEnterNotAppl","NoConfirm");
	setproperty(CHTSTHIVAGELASTDK, "CanEnterNotAppl","NoConfirm");
	setproperty(MCAGE, "CanEnterNotAppl","NoConfirm");
	setproperty(MCAGEDK, "CanEnterNotAppl","NoConfirm");
	setproperty(FIRSTSXAGE, "CanEnterNotAppl","NoConfirm");
	setproperty(FIRSTSXAGEDK, "CanEnterNotAppl","NoConfirm");
	setproperty(LIFETIMESEX, "CanEnterNotAppl","NoConfirm");
	setproperty(LIFETIMESEXDK, "CanEnterNotAppl","NoConfirm");
	setproperty(PART12MONUM, "CanEnterNotAppl","NoConfirm");
	setproperty(PART12MONUMDK, "CanEnterNotAppl","NoConfirm");
	setproperty(PARTAGE, "CanEnterNotAppl","NoConfirm");
	setproperty(PARTAGEDK, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVTESTY, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVTESTDK, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVTFPOSY, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVTFPOSDK, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVLASTNEGY, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVLASTNEGDK, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVPOSPROVY, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVPOSPROVDK, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVCLY, "CanEnterNotAppl","NoConfirm");
	setproperty(HIVCLDK, "CanEnterNotAppl","NoConfirm");
	setproperty(ARVFTY, "CanEnterNotAppl","NoConfirm");
	setproperty(ARVFTDK, "CanEnterNotAppl","NoConfirm");
	setproperty(ARVAMTNUM, "CanEnterNotAppl","NoConfirm");
	setproperty(ARVAMT, "CanEnterNotAppl","NoConfirm");
	setproperty(ARVAMDK, "CanEnterNotAppl","NoConfirm");
	setproperty(ARVSMISSDAYS, "CanEnterNotAppl","NoConfirm");
	setproperty(ARVSMISSDAYSDK, "CanEnterNotAppl","NoConfirm");
	setproperty(VLTESTLSTY, "CanEnterNotAppl","NoConfirm");	
	setproperty(VLTESTLSTDK, "CanEnterNotAppl","NoConfirm");	
	setproperty(MEDINHMONTHS, "CanEnterNotAppl","NoConfirm");
	setproperty(MEDINHMONTHSDK, "CanEnterNotAppl","NoConfirm");
	setproperty(CERVCNTSY, "CanEnterNotAppl","NoConfirm");
	setproperty(CERVCNTSDK, "CanEnterNotAppl","NoConfirm");
	
	
	
	
	
	

	if CONSTAT = notappl then
		CONSTAT = 0;
	endif;

	if loadcase(TM_SURV_DATA_HUB_DICT, IND_PROVINCE, IND_DISTRICT, IND_VILLAGE, IND_EACODE, IND_SHH, IND_TEAM_ID, IND_HHMEM_ID) then
		pullEmancipated = SURV_HUB_EMAN;
		pullAgeYears = SURV_HUB_AGE_YRS;
		pullSex = SURV_HUB_SEX;
		pullName = SURV_HUB_NAME;
	else
		errmsg("Unable to load data from household form");
	endif;

	if sysparm("IND_EA_DEVICEID_PASS") <> "" then
		IND_DEVICEID = sysparm("IND_EA_DEVICEID_PASS");
		setproperty(IND_DEVICEID, "Protected", "Yes");
	endif;

	if pullSex = 1 then
		pullSexLabel = "Male";
	elseif pullSex = 2 then
		pullSexLabel = "Female";
	endif;

	updateIndInt();

	if demode() <> add and visualvalue(IND_DE_START_FLAG) = 1 then
		advance to ENDCOMMENT;
	endif;

	currentDate = sysdate("YYYYMMDD");
PROC INDFORMSDT


preproc
	noinput;
	$ = FindDateTime();

PROC INNAME

preproc
	$ = toupper(pullName);
PROC INDIVHHRCOLL
preproc 
	$ = "A";
PROC STRTINSTR

postproc
	if $ <> notappl then
		IND_DE_START_FLAG = 1;
		setcaselabel(TM_IND_INT_DICT, caseLabelSet());
	endif;

	if $ = 1 then
		//"PRIME" THE SYSTEM TO GET VALUES POPULATING AND CALCULATING
		FindConfageysource();
	endif;

	if $ = 1 and (pullAgeYears >= 18 or pullEmancipated = 1) then
		skip to ELIGIBILITY_ADULT;
	elseif $ = 1 and (pullAgeYears < 18 or pullEmancipated <> 1) then 
		skip to ELIGIBILITY_PARENT;
	endif
PROC IND0040

	if $ <> 96 then
		skip to ENDSURVEY;
	endif;
PROC IND0042
	reqEntryAlpha($);
	skip to ENDSURVEY;
PROC AELIGSDT

preproc
	noinput;
	$ = FindDateTime();

PROC INESTART

PROC INEGEND

killfocus
	FindConfgend();

postproc
	// IF (1) YES IS SELECTED THEN SKIP TO AGECHECKYN
	if $ = 1 then
		skip to AGECHECKYN;
	endif;

PROC INEGENDC

killfocus
	FindConfgend();

postproc
	if INEGEND = 2 then
		if pullSex = INEGENDC then
			errmsg("You selected the same gender as displayed before. Please go back and correct.");
			reenter;
		endif;
	endif;

PROC AGECHECKYN

killfocus
	FindConfageysource();

postproc
	// SKIP TO INEEMAN IF (1) YES IS SELECTED FOR AGECHECKYN
	if agecheckyn = 1 and pullAgeYears < 18 then
		skip to INEEMAN;
	elseif AGECHECKYN = 1 and pullAgeYears >= 18 then
		skip to ACCHEAR;
	endif;

PROC AEAGECHANGETS

preproc
	noinput;
	$ = FindDateTime();
	unxAEAGECHANGETS = timestamp();

postproc
	FindConfageysource();

PROC AGEELIGY

killfocus
	FindEligStatAdult();

postproc
	if $ >= 18 then
		skip to ACCHEAR;
	elseif $ < 15 then
		skip to ENELIGTHX;
	elseif $ = pullAgeYears then
		errmsg("You entered the same age as displayed before. Please go back and correct.");
		reenter;
	elseif not $ in -1:101 then
		errmsg("Please enter a valid age in years.");
		reenter;
	endif;

PROC INEEMAN

preproc
	ask if ageeligy >= 15 and ageeligy < 18;

killfocus
	confEmanStatus();

postproc
	if $ = 1 then
		skip to ACCHEAR;
	endif;
	
PROC ACCHEAR

killfocus
	FindEligStatAdult();

postproc
	if ACCHEAR = 1 then
		skip to ACCLANG;
	endif;

PROC ACCOM1

killfocus
	FindEligStatAdult();

postproc
	if $ = 2 then
		skip to END_CONSENT;
	endif;
 
PROC ACCLANG

killfocus
	FindEligStatAdult();

postproc
	// SKIP TO INEPARAG IF (1) YES IS SELECTED FOR ACCLANG
	if ACCLANG = 2 then
		skip to END_CONSENT;
	endif;
PROC ACCCOGNITIVE

killfocus
	FindEligStatAdult();

postproc
	if $ = 2 then
		skip to END_CONSENT;
	endif;

PROC AELIGEDT
preproc
	noinput;
	$ = FindDateTime();

PROC INECHILD

preproc
	ask if AGEELIGY >= 15 and AGEELIGY < 18 and INEEMAN = 2;
	
	
postproc
	move to ELIGIBILITY_PARENT;

PROC INECONS

	move to CONSENT_ADULT;

PROC INSTART
preproc
	$ = "A";
PROC INLANGRAD

postproc
	if visualvalue(INAGREEIN) = notappl then
		if $ = 1 then
			execsystem("view:" + adjustedPath + "shared/consents/Template_Appendix B2_Consent for Int and Blood Draw_tablet_r20190815.pdf")
		else
			warning("PDF consent not available for %s.", getvaluelabel($));
		endif;
	endif;
PROC INAGREEIN

killfocus
	adultConsentStatus();

postproc
	if $ = 2 then
		skip to INAGREEINST2;
	endif;

PROC INAGREEINST1

	skip to INCONBIO;
	
PROC INAGREEINST2

	skip to INFUTCON;
PROC INCONBIO

	if $ = 2 then
		skip to INCONBIOST2;
	endif;
PROC INCONBIOST1

	skip to INCONBLST;
PROC INCONBIOST2

	skip to INFUTCON;
PROC INCONBLST

	if $ = 2 then 
		skip to INCONBLSTST2;
	endif;
PROC INCONBLSTST1

	skip to INFUTCON;
PROC INFUTCON

	if $ = 2 then 
		skip to INFUTCONST2;
	endif;
PROC INFUTCONST1

	skip to INCONCONFIRM;
PROC INCONCONFIRM

onfocus
	string consentedItems;
	if INAGREEIN = 2 and INFUTCON = 2 and INCONBIO = 2 and INCONBLST = 2 then
		consentedItems = "NONE";
	elseif INAGREEIN = 1 then
		consentedItems = "INTERVIEW";
	elseif INFUTCON = 1 then 
		consentedItems = consentedItems + "/n" + "FUTURE RESEARCH";
	elseif INCONBIO = 1 then
		consentedItems = consentedItems + "/n" + "BLOOD TESTING";
	elseif INCONBLST = 1 then
		consentedItems = consentedItems + "/n" + "BLOOD STORAGE";
	endif;

postproc
	// ENSURE YES IS ANSWERED BEFORE ADVANCING
	if $ = 2 then
		errmsg("Please go back and correct the inaccuracte response.");
		reenter;
	endif;
PROC INCONNM
reqEntryAlpha($);
PROC INDCONSTFDT

preproc
	// FIND DATE 
	$ = edit("99999999",sysdate("YYYYMMDD"));
	
PROC INCONSTAFFID

	// ENSURE THAT LENGTH IS 6
	if length($) <> 6 then
		errmsg("Staff ID must be 6 characters.");
		reenter;
	endif;
PROC INCONSTAT

preproc
	$ = "A";
	
postproc
	if constat_ADULT = 1 then
		move to END_CONSENT;
	elseif constat_ADULT = 2 then 
		move to ENDSURVEY;
	endif;
		
PROC PPCHESTART

preproc
	$ = "A";
PROC PPGUARD

onfocus
	//Variables
	numeric i = 1;
	//Clear Codes/Labels arrays of previous values
	clearStringArray(nameCodes); 
	clearStringArray(nameLabels); 

	forcase TM_HH_MEM_PASS_DICT where MEM_PASS_PROVINCE = IND_PROVINCE and MEM_PASS_DISTRICT = IND_DISTRICT and MEM_PASS_VILLAGE = IND_VILLAGE and MEM_PASS_EACODE = IND_EACODE and 
	MEM_PASS_SHH = IND_SHH and MEM_PASS_TEAM_ID = IND_TEAM_ID and (MEM_PASS_AGE_YRS >= 18 or (MEM_PASS_AGE_YRS <= 17 and MEM_PASS_EMAN = 1)) do
		//Review codes array to see if the value has already been added
		numeric unqCheck = NameUnqCheck(nameCodes, SURV_HUB_HHMEM_ID);
		
		//If the value has not been added, add it to the arrays
		if unqCheck = 0 then
			nameCodes(i) = MEM_PASS_HHMEM_ID;
			nameLabels(i) = MEM_PASS_NAME;
			i = i + 1;
		endif;
	enddo;
	nameCodes(i) = "";
	setvalueset($, nameCodes, nameLabels);

PROC PPGUARDREL

	//SKIP OS IF (4) OTHER IS NOT SELECTED
	if $ <> 4 then
		skip to PPCHEHEARING;
	endif;

PROC PPCHEGEND

killfocus
	FindConfgend();
	FindConfagey();

postproc
	// SKIP TO PPCHEAGE IF (1) YES IS SELECTED
	if $ = 1 then
		skip to ppcheage;
	endif;
	
PROC PPCHEGENDC

killfocus
	FindConfgend();

postproc
	if pullSex = $ then
		errmsg("You selected the same gender as displayed before. Please go back and correct.");
		reenter;
	endif;

PROC PPCHEAGE

killfocus
	FindConfageysource();
	parentEligStatus();

postproc
	if $ = 1 and pullAgeYears in 14:18 then
		skip to PPCHEEMAN;
	endif;
PROC PEAGECHANGETS
preproc
	noinput;
	$ = FindDateTime();
	unxPEAGECHANGETS = timestamp();

postproc
	FindConfageysource();

PROC PPCHEAGEC

killfocus
	parentEligStatus();

postproc
	//SKIP TO PPCHECONS IF AGE IS 18 OR OLDER
	if $ >= 18 then
		skip to ELIGIBILITY_ADULT;
	elseif not $ in -1:101 then
		errmsg("Please enter a valid age in years");
		reenter;
	elseif pullAgeYears = $ then
		errmsg("You entered the same age as displayed before. Please go back and correct.");
		reenter;
	elseif $ < 15 then
		skip to ENELIGTHX;
	endif;

	
 
PROC PPCHEEMAN
preproc
	ask if PPCHEAGEC in 14:18;

killfocus
	confEmanStatus();

postproc
	//GO TO ADULT ELIGIBILITY IF (1) YES IS SELECTED.
	if $ = 2 then
		skip to PPCHEHEARING;
	endif;

PROC PPCHEHEARING

killfocus
	parentEligStatus();

postproc
	if $ = 1 then
		skip to PPCHELANGACC;
	endif;

PROC PPCHEHEARACM

killfocus
	parentEligStatus();

postproc
	// SKIP TO END_CONSENT IF (2) NO IS SELECTED
	if $ = 2 then
		skip to END_CONSENT;
	endif;

PROC PPCHELANGACC

killfocus
	parentEligStatus();

postproc
	if $ = 2 then
		skip to END_CONSENT;
	endif;
	
PROC PPCHEPARAG
preproc
	$ = "A";
PROC PPCHECOGN

killfocus
	parentEligStatus();

postproc
	// SKIP TO END_CONSENT IF (2) NO IS SELECTED
	if $ = 2 then
		skip to END_CONSENT;
	endif;
	
PROC PELIGEDT

preproc
	noinput;
	$ = FindDateTime();

PROC PPCHADULT

preproc
	ask if PPCHEAGEC >= 18 or (PPCHEAGEC >= 15 and PPCHEEMAN = 1);
	
postproc
	move to ELIGIBILITY_ADULT;
PROC PPCHECONS
preproc 
	$ = "A";
postproc
	move to PARENTAL_PERMISSION;
PROC PPRMSTART
preproc
	$ = "A";
PROC PPRMLANG

postproc
	if visualvalue(PPRMAGREE) = notappl then
		if $ = 1 then
			execsystem("view:" + adjustedPath + "shared/consents/Template_Appendix B3_Permission from Parents for Minors_tablet_r20190815.pdf")
		else
			warning("PDF consent not available for %s.", getvaluelabel($));
		endif;
	endif;
PROC PPRMAGREE

killfocus
	parentConsentStatus();

postproc
	if $ = 2 then
		skip to PPRMAGREEST2;
	endif;

PROC PPRMAGREEST1
	skip to PPRMBIO;
PROC PPRMAGREEST2
	skip to PPRMFUTR;
PROC PPRMBIO

	if $ = 2 then
		skip to PPRMBIOST2;
	endif;
PROC PPRMBIOST1

	skip to PPRMCONTACT;
PROC PPRMBIOST2

	skip to PPRMFUTR;
PROC PPRMCONTACT

	if $ = 2 then
		skip to PPRMCONTACTST2;
	endif;
PROC PPRMCONTACTST1

	skip to PPRMBLST;
PROC PPRMBLST

	if $ = 2 then
		skip to PPRMBLSTST2;
	endif;
PROC PPRMBLSTST1

	skip to PPRMFUTR;
PROC PPRMFUTR
	if $ = 2 then 
		skip to PPRMFUTRST2;
	endif;
	
PROC PPRMFUTRST1

	skip to PPRMCONCONFIRM;
PROC PPRMCONCONFIRM

	// ENSURE YES IS SELECTED 
	if $ = 2 then
		errmsg("Please go back and correct the inaccurate response.");
		reenter;
	endif;
PROC PPCHPGNM
reqEntryAlpha($);

PROC PPCHSTFDT
preproc
	// FIND DATE 
	$ = edit("99999999",sysdate("YYYYMMDD"));

PROC PPCHSTAFFID

	// ENSURE LENGTH IS 6
	if length($) <> 6 then
		errmsg("Staff ID must be 6 characters");
		reenter;
	endif;
	
PROC PPCHCONSTAT
preproc
	$ = "A";

postproc
	if constat_parent = 1 then
		move to ELIGIBILITY_CHILD;
	elseif constat_parent = 2 then
		move to ENDSURVEY;
	endif;
PROC CELIGSDT
preproc
	noinput;
	$ = FindDateTime();

PROC CHESTART

preproc 
	$ = "A";

PROC CHEHEARING

killfocus
	FindEligStatChild();

postproc
	// SKIP TO CHELANGACC IF CHEHEARING IS (1) YES
	if $ = 1 then
		skip to chelangacc;
	endif;
	
PROC CHEHEARACM

killfocus
	FindEligStatChild();

postproc
	// GO TO END OF CONSENT FORM IF CHEHEARACM IS (2) NO
	if $ = 2 then
		skip to END_CONSENT;
	endif;

PROC CHELANGACC

killfocus
	FindEligStatChild();

postproc
	// SKIP TO CHEPARAG IF CHELANGACC IS (1) YES
	if $ = 2 then
		skip to END_CONSENT;
	endif;

PROC CHELANGACM

postproc
	// GO TO END OF CONSENT FORM IF CHELANGACM IS (2)NO
	if $ = 2 then
		skip to END_CONSENT;
	endif;

PROC CHECOGN

killfocus
	FindEligStatChild();

postproc
	// GO TO END OF CONSENT IF CHECOGN IS (2) NO
	if $ = 2 then
		skip to END_CONSENT;
	endif;

PROC CHEGEND

killfocus
	FindConfgend();

postproc
	// SKIP TO CHEAGE IF CHEGEND IS (1) YES
	if $ = 1 then
		skip to CHEAGE;
	endif;
	
PROC CHEGENDC

killfocus
	FindConfgend();

postproc
	if (pullSex = $) or (PPCHEGENDC = $) = $ then
		errmsg("You selected the same gender as displayed before. Please go back and correct.");
		reenter;
	endif;

PROC CHEAGE

killfocus
	FindConfageysource();

postproc
	// CHEAGE IS (1) YES AND AGEYEARS OR PPCHEAGEC IS BETWEEN 15 OR 17 THEN SKIP TO CHEEMAN
	if $ = 1 and ((pullAgeYears in 15:17) or (ppcheagec in 15:17)) then
		skip to CHEEMAN;
	endif;

PROC CEAGECHANGETS

preproc
	noinput;
	$ = FindDateTime();
	unxCEAGECHANGETS = timestamp();

postproc
	FindConfageysource();


PROC CHEAGEC
	
killfocus
	FindEligStatChild();

postproc
	// IF CHEAGEC >= 18 THEN GO TO ADULT ELIGIBILITY AND FLAG AS ELIGIBLE FOR ADULT PATH
	if $ >= 18 then
		skip to ELIGIBILITY_ADULT;
	elseif $ < 15 then
		skip to endsurvey;
	elseif not $ in 0:101 then
		errmsg("Please enter a valid age in years.");
		reenter;
	elseif (pullAgeYears or PPCHEAGEC) = $ then
		errmsg("You entered the same age as displayed before. Please go back and correct.");
		reenter;
	endif;

PROC CHEEMAN

killfocus
	confEmanStatus();

postproc
	// IF CHEEMAN IS (1) YES THEN GO TO ADULT ELIGIBILITY
	if $ = 1 then 
		skip to ELIGIBILITY_ADULT;
	elseif $ = 2 then
		skip to CHEHEARING;
	endif;

PROC CELIGEDT
preproc
	noinput;
	$ = FindDateTime();

PROC CCHADULT
preproc 
	ask if CHEAGEC >= 18 or (CHEAGEC >= 15 and CHEEMAN = 1);
	$ = "A";

postproc
	move to ELIGIBILITY_ADULT;
PROC CHECONS

	// GO TO ASSENT AFTER THIS SCREEN
	skip to ASSENT;
PROC ASOSTART
preproc 
	$ = "A";
PROC ASOLANG
postproc
	if visualvalue(ASOAGREE) = notappl then
		if $ = 1 then
			execsystem("view:" + adjustedPath + "shared/consents/Template_Appendix B4_Assent for Interview and Blood Draw_tablet_r20190815.pdf")
		else
			warning("PDF consent not available for %s.", getvaluelabel($));
		endif;
	endif;
PROC ASOTITLE
preproc 
	$ = "A";
PROC ASOINTRO
preproc 
	$ = "A";
PROC ASOPRPS
preproc 
	$ = "A";
PROC ASOPROC
preproc 
	$ = "A";
PROC ASORISK
preproc 
	$ = "A";
PROC ASOBEN
preproc 
	$ = "A";
PROC ASOALT
preproc 
	$ = "A";
PROC ASOCOST
preproc 
	$ = "A";
PROC ASOUSE
preproc 
	$ = "A";
PROC ASOCONF1
preproc 
	$ = "A";
PROC ASOCONF2
preproc 
	$ = "A";
PROC ASOELSE
preproc 
	$ = "A";
PROC ASOCONF4
preproc 
	$ = "A";
PROC ASOQST
preproc 
	$ = "A";
PROC ASOVRBL
preproc 
	$ = "A";
PROC ASOAGREE

killfocus
	childConsentStatus();

postproc
	if $ = 2 then
		skip to ASOAGREEST2;
	endif;
	
PROC ASOAGREEST1

	skip to ASYFUTR;
	
PROC ASOAGREEST2

	skip to ASOCONSTAT;
PROC ASYFUTR
preproc
	ask if PPRMFUTR = 2;
	
postproc
	if $ = 2 then
		skip to ASYFUTRST2;
	endif;
PROC ASYFUTRST1

	skip to ASYBIOGT;
PROC ASYBIOGT

preproc 
	ask if PPRMBIO = 1;

postproc
	if $ = 2 then 
		skip to ASYBIOGTST2;
	endif;
PROC ASYBIOGTST1

	skip to ASYBLST;
PROC ASYBIOGTST2

	skip to ASYASCONFIRM;
PROC ASYBLST

preproc 
	ask if PPRMBLST = 1;

postproc
	if $ = 2 then
		skip to ASYBLSTST2;
	endif;
PROC ASYBLSTST1

	skip to ASYASCONFIRM;
PROC ASYASCONFIRM
	// ENSURE YES IS SELECTED 
	if $ = 2 then
		errmsg("Please go back and correct the inaccurate response");
		reenter;
	endif;
PROC ASONM
reqEntryAlpha($);

PROC ASOSTFDT
preproc
	// FIND DATE 
	$ = edit("99999999",sysdate("YYYYMMDD"));

PROC ASOSTAFFID
	// ENSURE ENTRY LENGTH IS 6
	if length($) <> 6 then
		errmsg("Staff ID must be 6 characters");
		reenter;
	endif;
PROC ASOCONSTAT
	
	if constat_child = 1 then
		move to END_CONSENT;
	elseif constat_child = 2 then
		move to ENDSURVEY;
	endif;
PROC CONSTATD

	if CONSTAT = 2 then
		skip to ENDSURVEY;
	elseif CONSTAT = 99 then
		skip to ENELIGTHX;
	elseif CONSTAT = 1 and (ASYBIOGT = 2 or PPRMBIO = 2 or INCONBIO = 2) then
		skip to ADULTQX_START;
	endif;
PROC ENROLL
postproc
	if PTIDSCAN = "" then
		warning("Scan PTID")
		select("Continue", continue, "Cancel", reenter);
		extCapture("barcode_scan", "PTIDSCAN");
		warning("Verify PTID")
		select("Continue",continue,"Recapture PTID",reenter);
	endif;
PROC PTIDSCAN

preproc
	$ = extRead("barcode_scan");

postproc
	// IF PTIDSCAN IS BLANK THEN SKIP TO PTIDMAN
	if PTIDSCAN = "" then
		skip to PTIDMAN;
	endif;
	
PROC PTIDCOMF

	if PTIDCOMF = 1 then
		skip to INPAPER;
	else
		errmsg("Swipe back to scan the correct barcode.");
		reenter;
	endif;

PROC PTIDMAN
	reqEntryAlpha($);

	// ENSURE LENGTH IS 8
	if length(strip($)) <> 8 then
		errmsg("PTID should be 8 characters. Please swipe back and correct the PTID manual entry.");
		reenter;
	endif;

PROC INPAPER

	skip to ADULTQX_START;
PROC ENELIGTHX

	skip to ENDSURVEY;
PROC ADQXSDT
preproc
	noinput;
	$ = FindDateTime();

PROC INSTR1

preproc 
	$ = "A";
PROC SCHLAT

if ($ = 2 or $ = -8 or $ = -9) then
	skip to LIVETIME_MONTHS;
endif;
PROC LIVETIME_MONTHS
	
postproc
	if LIVETIMENUM <> notappl and LIVETIMEDK <> notappl then
		errmsg("Cannot enter or select multiple response options");
		reenter;
	elseif LIVETIMENUM = notappl and LIVETIMEDK = notappl then
		errmsg("Sorry! This response is required.");
		reenter;
	elseif LIVETIMENUM > 11 and LIVETIME = 1 then
		errmsg("Please code in years if more than 11 months.");
		reenter;
	elseif LIVETIMEDK = 3 or LIVETIMEDK = -8 or LIVETIMEDK = -9 then
		skip to MONTHOUTEVER;
	endif;
PROC LIVETIMEDK

preproc
	ask if LIVETIMENUM = notappl and LIVETIME = notappl;
PROC OUTREGIONWHR

	if $ <> 96 then
		skip to MONTHOUTEVER;
	endif;
PROC OUTREGIONWHROTH
	
preproc
	ask if OUTREGIONWHR = 96;
	

reqEntryAlpha($);
PROC MONTHOUTEVER

if MONTHOUTEVER = 2 or MONTHOUTEVER = -8 or MONTHOUTEVER = -9 then
	skip to WORK12MO;
endif;
PROC MONTHWHEN_MONTHS


postproc
	if MONTHWHENY < 1900 or MONTHWHENY > 2019 then 
		errmsg("Year must be greater than 1900 and less than the current year.");
		reenter;
	endif;
PROC MONTHWHENDK

preproc
	ask if MONTHWHENY = notappl
PROC MONTHTIMES

preproc 
	ask if MONTHWHENM > 0 and MONTHWHENY > 1900;


postproc
	if $ = 0 then
		errmsg("Respondent reported having lived away from home for over a month in the past year. Please correct the response.");
		reenter;
	elseif $ > 12 then
		errmsg("The number of times of being away from home for one or more months cannot be more than 12 times in the past year.");
		reenter;
	endif;
	
	

	
PROC MONTHTIMESDK

preproc
	ask if MONTHTIMES = notappl;
	
PROC WHEREOUT

	if $ <> 96 then
		skip to REASONAWAY;
	endif;
PROC WHEREOUTOTH
	reqEntryAlpha($);
PROC REASONAWAY
	
	if $ <> 96 then
		skip to WORK12MO;
	endif;
PROC REASONAWATOTH
	reqEntryAlpha($);
PROC WORK12MO

	if WORK12MO = 2 or WORK12MO = -8 or WORK12MO = -9 then
		skip to M2_MARRIAGE;
	endif;
	
PROC WORKIND
	if $ <> 96 then
		skip to NORMWORK;
	endif;
PROC WORKINDOTH
reqEntryAlpha($);
PROC INSTR2

preproc
	$ = "A";
PROC EVERMAR

	if $ < 0 or $ = 2 then
		skip to M3_REPRO;
	endif;
	
PROC AGEMAR_BLK
	
postproc
	if (AGEMAR <> notappl) and AGEMARDK <> notappl then
		errmsg("Cannot enter or select multiple response options");
		reenter;
	elseif AGEMAR = notappl and AGEMARDK = notappl then
		errmsg("Sorry! This response is required.");
		reenter;
	elseif AGEMAR > CONFAGEY then 
		errmsg("Respondent reported an age greater than their current age.  Please correct.");
		reenter;
	elseif AGEMAR < 5 then
		errmsg ("Respondent reported an age at first marriage of less than 5 years old.  Please confirm this is correct.");
		reenter;
	endif;
PROC CURMAR
	
	if ($ in 3:5) or ($ < 0) then
		skip to M3_REPRO;
	endif;
PROC INSTR2A

	//if CONFGEND = 2 then 
		//skip to HUSLIVEW;
	//endif;
	

preproc
	$ = "A";
PROC NUMWIF_BLK

postproc
	if NUMWIF = 0 then
		errmsg("Respondent reported having at least 1 wife or partner. If respondent does not have any wives or partners, please go back and correct.");
		reenter;
	elseif NUMWIFDK = -8 or NUMWIFDK -9 then
		skip to M3_REPRO;
	elseif (NUMWIF <> notappl) and NUMWIFDK <> notappl then
		errmsg("Cannot enter or select multiple response options");
		reenter;
	elseif NUMWIF = notappl and NUMWIFDK = notappl then
		errmsg("Sorry! This response is required.");
		reenter;
	endif;
PROC QXA1205

	if $ = 1 then 	
		skip to NPNUM;
	endif;
PROC NPNUM

	if $ = 0 then
		skip to WIFLIVEEW;
	endif;
PROC NEWNAMEDK

preproc
	ask if NEWNAME = "";
PROC WIFLIVEEW_BLK

postproc
	if WIFLIVEEW <= 0 then
		skip to M3_REPRO;
	elseif (WIFLIVEEW <> notappl) and WIFLIVEEWDK <> notappl then
		errmsg("Cannot enter or select multiple response options");
		reenter;
	elseif WIFLIVEEW = notappl and WIFLIVEEWDK = notappl then
		errmsg("Sorry! This response is required.");
		reenter;
	endif;
	
PROC WIFEWHERE

	skip to M3_REPRO;
PROC HUSLIVEW

	if $ <> 0 then {and count of QXA1205 list = 0}
		skip to husotwif;
	endif;
PROC HHQXHUS2

	if ($ = 1 or $ = -8 or $ = -9) then
		skip to HUSOTWIF;
	endif;
PROC NEWHSELECT

	if newhselect <> 96 then
		skip to HUSOTWIF;
	endif;
	

	
PROC NEWHNAMEDK

preproc
	ask if NEWHNAME = ""; 
	
PROC HUSOTWIF

	if ($ = 2 or $ = -8 or $ = -9) then
		skip to M3_REPRO;
	endif;

PROC M3_REPRO

preproc
	if CONFGEND = 1 then
		skip to INSTR3E;
	endif;
PROC LIVEB

	if ($ = 0 or $ = -8 or $ = -9) then
		skip to INSTR3D;
	endif;
PROC LIVEBDK

preproc
	ask if LIVEB = notappl; 
PROC CHILDA2012

	if ($ = 0 or $ = -8 or $ = -9) then
		skip to INSTR3D;
	endif;
	
PROC CHILDA2012DK

preproc
	ask if CHILDA2012 = notappl;
PROC INSTR3B

	
PROC PRGTWIN

	if ($ = 2 or $ = -8 or $ = -9) then
		skip to CHILDLAST;
	endif;
PROC PRGTWINPLUS

	if PRGTWINPLUS = 1 then 
		move to PRGTWINNAME;
	else 
		skip to PRGCARE;
	endif;
PROC PRGCARE

	if ($ = -8 or $ = -9) then
		skip to HIVTSAD;
	endif;
	
PROC HIVTSBP

	if ($ = 2 or $ = -8 or $ = -9) then
		skip to HIVTPRG;
	endif;
PROC HIVPSBP

	if ($ = 2 or $ = -8 or $ = -9) then
		skip to HIVTPRG;
	endif;
PROC ARVFVST

	if ARVFVST = 1 then
		skip to BIRTHDAY;
	else
		skip to ARVTKPG;
	endif;
PROC HIVTPRG

	if $ <> 1 then
		skip to HIVTSAD;
	endif;
	
PROC HIVRTPG

	if $ <> 1 then
		skip to HIVTSAD;
	endif;
	
PROC ARVTKPG

	if $ <> 2 then
		skip to BIRTHDAY;
	endif;
PROC ARVNRPG

	if $ <> 96 then
		skip to BIRTHDAY;
	endif;
PROC ARVNRPGOTH

	skip to BIRTHDAY;
PROC HIVTSAD

	if $ <> 1 then
		skip to BIRTHDAY;
	endif;
PROC BIRTHDK

preproc
	ask if BIRTHYR = notappl;
PROC CHILDALIVE

	if $ <> 2 then
		skip to CHILDBRSTFD;
	endif;
PROC DEATHAGEYR

	if $ > 0 or ($ = -8 or $ = -9) then 
		skip to CHILDBRSTFD;
	endif;
PROC DEATHAGEYRDK

preproc
	ask if DEATHAGEYR = notappl;
PROC DEATHAGEMO

	if $ > 11 then
		errmsg("Months must be between 0 and 11.");
		reenter;
	endif;
PROC DEATHAGEMODK

preproc
	ask if DEATHAGEMO = notappl;
PROC CHILDBRSTFD

	if $ <> 1 then 
		skip to chtsthivbirth;
	endif;
	
PROC CHTSTHIVBIRTH

	if $ <> 1 then
		skip to CHILDMORE;
	endif;
PROC CHTSTHIVAGEM

	if $ > 11 then
		errmsg("Months must be between 0 and 11.");
		reenter;
	endif;
	
PROC CHTSTHIVAGELASTNUM

preproc
	ask if CHTSTHIVAGELASTNUM = notappl and CHTSTHIVAGELAST = notappl;

	
PROC PREGNANT

	if $ = 1 then
		skip to M4_MALECIRC;
	endif;
	
PROC AVOIDPREG

	if $ <> 1 then
		skip to M4_MALECIRC;
	endif;
	
PROC CMETHOD

	DkRefOnly($);
PROC M4_MALECIRC
preproc
	ask if confgend = 1;
	
PROC MCSTATUS

	if ($ = 1 or $ = 2) then 
		skip to INSTR4B;
	elseif $ < 0 then 
		skip to M5_SXAC;
	endif;
PROC MCPLANS

	skip to M5_SXAC;
PROC MCWHOMED

	if $ <> 1 then
		skip to M5_SXAC;
	endif;
PROC MCAGEDK

preproc
	ask if MCAGE = notappl;
PROC FIRSTSXAGE

	if $ > confagey then
		errmsg("Age at first sex cannot be greater than current age.");
		reenter;
	elseif $ = 96 then
		skip to M6_HIVT;
	elseif $ = 12 or -8 or -9 then
		skip to LIFETIMESEX;
	endif;
	
PROC FIRSTSXAGEDK

preproc
	ask if FIRSTSXAGE = notappl;
PROC FIRSTSXAGEC

	if $ = 2 then
		errmsg("Please go back and correct the participant's age at first vaginal sex.");
		reenter;
	endif;
PROC LIFETIMESEX_BLK

postproc
	if (LIFETIMESEX <> notappl) and LIFETIMESEXDK <> notappl then
		errmsg("Cannot enter or select multiple response options");
		reenter;
	elseif LIFETIMESEX = notappl and LIFETIMESEXDK = notappl then
		errmsg("Sorry! This response is required.");
		reenter;
	elseif LIFETIMESEX < 0 and LIFETIMESEXDK = notappl then
		errmsg("Please enter a valid number of sexual partners or select DON'T KNOW or REFUSED.");
		reenter;
	elseif LIFETIMESEX = 0 then 
		errmsg("Please confirm whether the respondent has ever had sex. If they have never had sex, return to the previous screen and correct the response.");
		reenter;
	elseif LIFETIMESEX = 0 or -8 or -9 then
		skip to M6_HIVT;
	endif;
PROC LIFETIMESEX

postproc

	if $ < 0 then
		errmsg("Please enter a valid number of sexual partners or swipe forward to select DON'T KNOW or REFUSED.");		
		reenter;
	elseif $ = 0 then
		errmsg("Please confirm whether the respondent has ever had sex. If they have never had sex, return to the previous screen and correct the response.");
		reenter;
	endif
	 
PROC LIFETIMESEXDK

preproc
	ask if LIFETIMESEX = notappl;
PROC PART12MONUM

	if $ = 0 then
		skip to M6_HIVT;
	elseif $ < 0 or $ > 100 then
		errmsg("Please enter a valid number of sexual partners or swipe forward to select DON'T KNOW or REFUSED.");
		reenter;
	elseif $ > LIFETIMESEX then
		errmsg("Partners in the past 12 months cannot be more than lifetime sexual partners.  Please swipe back to correct.");
		reenter;
	endif;
PROC PART12MONUMDK

preproc
	ask if PART12MONUM = notappl;
PROC PARTLIVEW

	if $ = 2 then
		skip to PARTINIT;
	endif;
PROC PARTAGEDK

preproc
	ask if PARTAGE = notappl;
PROC SXPREPS

preproc
	if PART12MONUM <= 1 then
		skip;
	endif;
	
postproc
	if PART12MONUM > 1 then
		skip to PARTLIVEW;
	endif;
PROC M6_HIVT
	//ERROR:  Invalid arithmetic or conditional expression near line 2 in M6_HIVT procedure
	//COMMENTING OUT FOR NOW - JI 20190717
	//if $ = 2 then 
		//skip to WITHDRAWAL;
	//endif;
PROC HFLAST12MO

	if $ <> 1 then
		skip to HIVTSTEVER;
	endif;
	
PROC HIVTSTEVER

	if $ = 1 then
		skip to HIVTESTM;
	elseif ($ = -8 or $ = -9) then
		skip to M7_HIVS;
	elseif $ = 2 and (HIVTSBP = 1 or HIVTPRG = 1 or HIVTSAD = 1) then
		errmsg("Respondent previously reported testing for HIV. Please go back and correct response.");
		reenter;
	endif;

PROC HIVTSTNVRRSN

	DkRefOnly($);

	if (("Y" in $) or ("Z" in $)) and (length($) >= 2) then
		errmsg("'DON’T KNOW' and 'REFUSED' cannot be selected with any other category.");
		reenter;
	elseif not "X" in $ then
		skip to M7_HIVS;
	endif;

	
PROC HIVTSTNVRRSNOTH

	skip to M7_HIVS;
	
PROC HIVTESTDK

preproc
	ask if HIVTESTY = notappl;
PROC HIVTSTLOCATIONOTH

preproc 
	ask if HIVTSTLOCATION = 96;
PROC HIVTSTRSNOTH
preproc
	ask if HIVTSTRSN = 96;
PROC HIVTSTRSLT

	if $ <> 1 then
		skip to HIVPOSPROV;
	elseif $ = 2 and (HIVTSBP = 1 or HIVTPRG = 1 or HIVTSAD = 1) then
		errmsg("Respondent previously reported testing for HIV. Please go back and correct response.");
		reenter;
	endif;
PROC HIVTFPOSDK

preproc
	ask if HIVTFPOSY = notappl;
PROC HIVLASTNEGM

preproc
	ask if (hivtstrslt = 1 or hivpsbp =1 or hivrtpg = 1 or hivrtad = 1);
PROC HIVLASTNEGDK

preproc
	ask if HIVLASTNEGY = notappl;
PROC HIVPOSPROV

	if $ <> 1 then
		skip to INSTR6B;
	endif;
PROC HIVPOSPROVDK

preproc
	ask if HIVPOSPROVY = notappl;
PROC DISCLOSE
	
	if (("A" in $) or  ("Y" in $) or ("Z" in $)) and (length($) >= 2) then
		errmsg("'NO ONE', 'DON’T KNOW' and 'REFUSED' cannot be selected with any other category.");
		reenter;
	elseif not "X" in $ then
		skip to INSTR6C;
	endif;
		
	ReqEntryAlpha($);
	
PROC DISCLOSEOTH

preproc 
	ask if "X" in DISCLOSE;
PROC PRPEVRHDR

	if $ <> 1 then 
		skip to PREPWDTK;
	endif;
	
PROC PREPEVER

if $ <> 1 then 
		skip to PREPWDTK;
	endif;
PROC PREPCURNT

postproc
	if $ = 1 then
		skip to M7_HIVS;
	endif;
PROC PREPWDTK

preproc
	ask if HIVTSTEVER = 2 or HIVTSTRSLT = 2;
PROC HIVCARE

	if $ = 1 then
		skip to HIVCRLTC;
	elseif $ = 2 then 
		skip to HIVCNOTRSN;
	elseif ($ = -8 or $ = -9) then
		skip to ARVSTAKENEV;
	endif;
	
PROC HIVCNOTRSN

postproc
	if $ <> 96 then
		skip to M8_TBOHI;
	endif;
PROC HIVCNOTRSNOTH


preproc
	ask if HIVCNOTRSN = 96;
	
reqEntryAlpha($);
PROC HIVCRLTC

	if $ <> 1 then 
		skip to TRAVELDIFF;
	endif;
PROC HIVCLINIC
postproc 
	if $ <> 96 then
		skip to CLINCHANGE;
	endif;
PROC HIVCLINICOTH

preproc
	ask if HIVCLINIC = 96;
	
reqEntryAlpha($);
PROC CLINCHANGE

	if $ <> 2 then
		skip to HIVCLM;
	endif;
	
PROC HIVCLY


postproc
	if $ < 1981 or $ > 2020 then
		errmsg("Year of last HIV treatment or care visit must be greater than 1981 and less than 2020.");
		reenter;
	endif
PROC HIVCLDK

preproc
	ask if HIVCLY = notappl;
PROC ARVSTAKENEV

	if $ = 1 then
		skip to ARVFTM;
	elseif ($ = -8 or $ = -9) and (HIVCARE <> -8 or $ <> -9) then
		skip to VLTEST;
	elseif ($ = -8 or $ = -9) and (HIVCARE = -8 or $ = -9) then
		skip to INSTR8A;
	elseif $ = 2 and (arvfvst = 1 or ARVTKPG = 1) then
		errmsg("Respondent previously reported taking ARVs. Please go back and correct response.");
		reenter;
	elseif $ = 2 then
		skip to ARVSNOTTAKE;
	endif;
PROC ARVSNOTTAKE

	if $ <> 96 then
		skip to VLTEST;
	endif;
PROC ARVSNOTTAKEOTH

	skip to VLTEST;
PROC ARVFTDK

preproc
	ask if ARVFTY = notappl;
PROC ARVSCURRENT

	if $ = 1 then
		skip to ARVLOC;
	elseif $ < 0 then
		skip to VLTEST;
	endif;
PROC ARVSNOTCURRSN

	if $ <> 96 then
		skip to VLTEST;
	endif;
PROC ARVSNOTCURRSNOTH

	skip to VLTEST;
PROC ARVAMDK

preproc
	ask if ARVAMTNUM = notappl and ARVAMT = notappl;
PROC ARVSWITCH

	if $ <> 1 then 
		skip to ARVINTERR;
	endif;
PROC ARVSWITCHWHY

	if $ <> 96 then 
		skip to ARVINTERR;
	endif;
PROC ARVSWITCHWHYOTH

	skip TO ARVINTERR;
PROC ARVINTERR

preproc
	ask if MONTHTIMES >= 1;
PROC ARVSMISSDAYS

	if $ > 30 then
		errmsg("Value entered cannot be more than 30.");
		reenter;
	endif;
PROC ARVSMISSDAYSDK

preproc
	ask if ARVSMISSDAYS = notappl;
PROC VLTEST

	if $ <> 1 then
		skip to TBSYMPASSESS;
	endif;
PROC VLTESTLSTDK

preproc
	ask if VLTESTLSTY = notappl;
PROC TBSYMPASSESS

	if (("E" in $) or("Y" in $) or ("Z" in $)) and (length($) >= 2) then
		errmsg("'NONE OF THE ABOVE', 'DON’T KNOW' AND 'REFUSED'cannot be selected with any other category.");
		reenter;
	endif;

	DkRefOnly($);
PROC TBTPT

	if $ <> 1 then
		skip to M8_TBOHI;
	endif;
PROC MEDINHCURR

	if $ <> 1 then 
		skip to M8_TBOHI;
	endif;
PROC MEDINHMONTHS_BLK

postproc
	if (MEDINHMONTHS <> notappl) and MEDINHMONTHSDK <> notappl then
		errmsg("Cannot enter or select multiple response options");
		reenter;
	elseif MEDINHMONTHS = notappl and MEDINHMONTHSDK = notappl then
		errmsg("Sorry! This response is required.");
		reenter;
	endif;
PROC MEDINHMONTHS

preproc
	ask if MEDINHMONTHS = notappl;
PROC TBCLINVISIT

	if ($ = 2 or $ = -8 or $ = -9) and confgend = 1 then
		skip to INSTR8C;
	elseif ($ = 2 or $ = -8 or $ = -9) and confgend = 2 then
		skip to INSTR8B;
	endif;
PROC TBDIAGN

	if $ <> 1 then
		skip to INSTR8C;
	endif;
	
	
PROC TBTREATED

	if $ <> 1 then
		skip to INSTR8C;
	endif;
PROC TBTTREATCURR

	if $ = 1 then
		skip to INSTR8C;
	endif;
PROC TBTREAT6MOFULL

	if confgend = 1 then
		skip to INSTR8C;
	endif;
PROC INSTR8B

preproc
	ask if confgend = 2;
PROC CERVCNTST

	if $ <> 1 then
		skip to INSTR8C;
	endif;
PROC CERVCNTSDK

preproc
	ask if CERVCNTSY = notappl;
PROC CERNCNRSLT

	if ($ = 1 or $ = -8 or $ = -9) then
		skip to HPVVACC;
	endif;
PROC CHRONICCOND

	if (("I" in $)or  ("Y" in $) or ("Z" in $)) and (length($) >= 2) then
		errmsg('"NONE OF THE ABOVE", "DON’T KNOW" and “REFUSED” cannot be selected with any other category.');
		reenter;
	elseif not "X" in $ then
		skip to M9_ALCOHOL_USE;
	endif;
		
	ReqEntryAlpha($);
PROC CHRONICCOND_OTH


preproc
	ask if "X" in CHRONICCOND;
PROC CHRONICMED

	
	if (("I" in $)or  ("Y" in $) or ("Z" in $)) and (length($) >= 2) then
		errmsg('"NONE OF THE ABOVE", "DON’T KNOW" and “REFUSED” cannot be selected with any other category.');
		reenter;
	elseif not "X" in $ then
		skip to CHRONICMED;
	endif;
		
	ReqEntryAlpha($);
PROC CHRONICMED_OTH

preproc
	ask if "X" in CHRONICMED;
PROC ALCFREQ

	if ($ = 0 or $ = -8 or $ = -9) then
		skip to M10_EXPOSURE;
	endif;
PROC M10_EXPOSURE

preproc
	ask if confagey <= 24;
PROC INSTR10

preproc
	$ = "A";
PROC CONDOMWHERE

	DkRefOnly($);

	if not "X" in $ then
		skip to CONDOMGET;
	endif;
PROC CONDOMGET

	if $ <> 2 then
		skip to ADTPSX;
	endif;
PROC CONDOMNOTEASYRSN

	DkRefOnly($);

	if not "X" in $ then
		skip to ADTPSX;
	endif;
PROC ADHIVPREV

	DkRefOnly($);

	if not "X" in $ then
		skip to ADHIVSCHMTG;
	endif;
PROC INCOMMENTS
	if (INCONBIO = 1 or INFUTCON = 1 or ASYFUTR = 1 or ASYBIOGT = 1) then
		skip to LOCATOR;
	else
		skip to ENDSURVEY;
	endif;
PROC ADQXEDT
preproc
	noinput;
	$ = FindDateTime();
PROC LOCSTAFFID

	if length($) <> 6 then
		errmsg("Staff ID must be 6 characters.");
		reenter;
	endif;
PROC LOCGPS

	if (INFUTCON = 2 and INCONBIO = 2) or (ASYFUTR = 2 and ASYBIOGT = 2) then
		//THIS SKIP BOMBED B/C LOCCONT DOESN'T EXIST, CHANGING IT TO LOCCONT2, NO IDEA IF THIS IS RIGHT - JI 20190806
		skip to LOCCONT2;
	elseif (INFUTCON = 1 and INCONBIO = 1) or (ASYFUTR = 1 and ASYBIOGT = 1) then
		skip to LOCINSTR2;
	elseif (INFUTCON = 1 and INCONBIO = 2) or (ASYFUTR = 1 and ASYBIOGT = 2) then
		skip to LOCINSTR1;
	endif;
PROC LOCINSTR1

preproc 
	$ = "A";
PROC LOCINSTR2

preproc 
	$ = "A";
PROC HIVCLINICC

postproc

	if $ <> 2 then 
		skip to LOCLFNM;
	endif;
PROC HIVCLINIC2

preproc
	ask if HIVCLINICC = 2;
PROC LOCLFNM

reqEntryAlpha($);
PROC LOCLLN

reqEntryAlpha($);
PROC LOCPRNTGRNM

preproc
	if confagey >= 18 or (confagey < 18 and ineeman = 1) then
		skip;
	endif;
PROC LOCADDRS
reqEntryAlpha($);
PROC LOCCNTPH

	if $ = 2 then
		skip to LOCCONT2;
	endif;
PROC LOCMOBNO

preproc 
	
	setproperty($,"CanEnterNotAppl", "NoConfirm");

postproc	
	if $ = notappl then
		skip to LOCLANDNO;
	endif;
PROC LOCLANDNO

preproc 
	
	setproperty($,"CanEnterNotAppl", "NoConfirm");

postproc
	
	if $ = notappl then
		skip to LOCOTHNO;
	endif;
PROC LOCOTHNO

preproc 
	
	setproperty($,"CanEnterNotAppl", "NoConfirm");


postproc
	
	if $ = notappl then 
		skip to LOCPHPRF;
	elseif LOCMOBNO = notappl and LOCOTHNO = notappl and LOCLANDNO = notappl then
		errmsg("Participant indicated they were willing to be contacted by phone. Please enter at least one phone number.");
		reenter;
	endif;
PROC LOCPHPRF

	if $ = 1 then
		preferredNumber = LOCMOBNO;
	elseif $ = 2 then
		preferredNumber = LOCLANDNO;
	elseif $ = 3 then
		preferredNumber = LOCOTHNO;
	elseif $ = 1 and LOCMOBNO = notappl then
		errmsg("Please select a valid number as the preferred number.");
		reenter;
	elseif $ = 2 and LOCLANDNO = notappl then
		errmsg("Please select a valid number as the preferred number.");
		reenter;
	elseif $ = 3 and LOCOTHNO = notappl then
		errmsg("Please select a valid number as the preferred number.");
		reenter;
	endif;
PROC LOCPHNM
reqEntryAlpha($);
PROC LOCINSTR3
preproc
	$ = "A";
PROC LOCSECPS
reqEntryAlpha($);
PROC LOCSECMM
reqEntryAlpha($);
PROC LOCOTHC

	if $ = 2 then 
		skip to LOCEND;
	endif;
PROC LOCOTHCNM
reqEntryAlpha($);
PROC LOCOTHCMO
reqEntryAlpha($);
PROC LOCOTHCPNM
reqEntryAlpha($);
PROC LOCEND

preproc
	$ = "A";
PROC LOCCONT2

	if $ = 1 and (INCONBIO = 1 or ASYBIOGT = 1) then 
		skip to PTIDS;
	elseif ($ = 1 and (INCONBIO = 2 or ASYBIOGT = 2)) or $ = 2 then
		skip to ENDSURVEY;
	endif;
PROC BIOSDT

preproc
	$ = FindDateTime();
 	noinput;
PROC PTIDS

	if $ = "" then 
		skip to PTIDM;
	endif;
PROC CONFBC

	if $ = 1 then
		skip to BIOPTIDMATCH;
	else 
		errmsg("Please go back to scan the correct barcode.");
		reenter;
	endif;
PROC PTIDM

	if length($) <> 8 then
		errmsg("PTID should be 8 characters. Please go back and re-enter the PTID.");
		reenter;
	endif;
PROC BIOPTIDMATCH

preproc
	ask if PTIDM <> PTIDMAN;
PROC BIOPTIDMATCH2

preproc
	ask if PTIDM <> PTIDMAN;
PROC SPECDATE
	
preproc
	$ = edit("99999999",sysdate("YYYYMMDD"));
	noinput;
PROC BIOTEAMID

	if not $ in 1:100 then
		errmsg("Team ID must be greater than 0 and less than 100.");
		reenter;
	endif;
PROC BIOSTAFFID

	if length($) <> 6 then
		errmsg("Staff ID must be 6 characters");
		reenter;
	endif;
PROC BIOHIVSTART

preproc
	$ = "A";
	
PROC COLTYPEAD

	if ($ = 10 or $ = 4 or $ = 1) then
		skip to HIVTESTALG;
	endif;
PROC BIOCLCTFL

	if $ = 1 then
		skip to ENDSURVEY;
	else
		errmsg("Please go back and provide the correct answer to 'Blood Collection Type'");
		reenter;
	endif;
PROC HIVTESTALG

	if $ = 1 then
		skip to BIOMTEST2;
	else
		skip to BIOMTEST3;
	endif;
PROC BIO2RAPID
preproc
	$ = 'A';
	
PROC BIO2HIVTST1
preproc
	$ = 'A';
PROC BIO2HIVTST1LT
	reqEntryAlpha($);
PROC BIO2HIVTST1EX

preproc
	setcapturetype($,5,"YYYYMMDD");

postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIO2HIVTST1RS

	if $ = 1 then 
		skip to BIO2HIVTST2;
	elseif $ = 2 then
		skip to BIO2HIVNEG;
	elseif $ = 3 then
		skip to BIO2HIVTST12;
	endif;
PROC BIO2HIVTST12
preproc
	$ = 'A';
PROC BIO2HIVTST1LT2
	reqEntryAlpha($);
PROC BIO2HIVTST1EX2
preproc
	setcapturetype($,5,"YYYYMMDD");
postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIO2HIVTST1RS2

	if $ = 1 then
		skip to BIO2HIVTST2;
	elseif $ = 2 then
		skip to BIO2HIVNEG;
	elseif $ = 3 then
		skip to BIO2INVALID;
	endif;
PROC BIO2HIVTST2
preproc
	$ = 'A';
PROC BIO2HIVTST2LT
	reqEntryAlpha($);
PROC BIO2HIVTST2EX
preproc
	setcapturetype($,5,"YYYYMMDD");
postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIO2HIVTST2RS

	if $ = 1 then 
		skip to BIO2HIVPOS;
	elseif $ = 2 then
		skip to RRBIO2HIVTST1;
	elseif $ = 3 then
		skip to BIO2HIVTST22;
	endif;
PROC BIO2HIVTST22
preproc
	$ = 'A';
PROC BIO2HIVTST2LT2
	reqEntryAlpha($);
PROC BIO2HIVTST2EX2
preproc
	setcapturetype($,5,"YYYYMMDD");
postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIO2HIVTST2RS2

	if $ = 1 then 
		skip to BIO2HIVPOS;
	elseif $ = 2 then
		skip to RRBIO2HIVTST1;
	elseif $ = 3 then
		skip to BIO2INVALID;
	endif;
PROC RRBIO2HIVTST1
preproc
	$ = 'A';
PROC RRBIO2HIVTST1LT
	reqEntryAlpha($);
PROC RRBIO2HIVTST1EX
preproc
	setcapturetype($,5,"YYYYMMDD");
postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC RRBIO2HIVTST1RS

	if $ = 1 or $ = 2 then
		skip to RRBIO2HIVTST2;
	elseif $ = 3 then 
		skip to RRBIO2HIVTST12;
	endif;
PROC RRBIO2HIVTST12
preproc
	$ = 'A';
PROC RRBIO2HIVTST1LT2
	reqEntryAlpha($);
PROC RRBIO2HIVTST1EX2
preproc
	setcapturetype($,5,"YYYYMMDD");
postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC RRBIO2HIVTST1RS2

	if $ = 1 or 2 then
		skip to RRBIO2HIVTST2;
	else
		skip to BIO2INVALID;
	endif;
PROC RRBIO2HIVTST2
preproc
	$ = 'A';
PROC RRBIO2HIVTST2LT
	reqEntryAlpha($);
PROC RRBIO2HIVTST2EX
preproc
	setcapturetype($,5,"YYYYMMDD");
postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC RRBIO2HIVTST2RS

	if ($ = 1 and rrbio2hivtst1rs = 1) or ($ = 1 and rrbio2hivtst1rs2 = 1) then
		skip to BIO2HIVPOS;
	elseif ($ = 2 and rrbio2hivtst1rs = 2) or ($ = 2 and rrbio2hivtst1rs2 = 2) then
		skip to BIO2HIVNEG;
	elseif ($ = 2 and rrbio2hivtst1rs = 1) or (rrbio2hivtst1rs2 = 1 and $ = 2) OR (rrbio2hivtst1rs = 2 and $ = 1) or 
	(rrbio2hivtst1rs2 = 2 and $ = 1) then
		skip to bio2hivind
	elseif rrbio2hivtst2rs = 3 then
		skip to rrbio2hivtst22;
	endif;
PROC RRBIO2HIVTST22
preproc
	$ = 'A';
PROC RRBIO2HIVTST2LT2
	reqEntryAlpha($);
PROC RRBIO2HIVTST2EX2
preproc
	setcapturetype($,5,"YYYYMMDD");
postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC RRBIO2HIVTST2RS2

	if (rrbio2hivtst1rs = 1 and $ = 1) or (rrbio2hivtst1rs2 =1 and $ = 1) then
		skip to BIO2HIVPOS;
	elseif (rrbio2hivtst1rs = 2 and rrbio2hivtst2rs2 = 2) or (rrbio2hivtst1rs2 =2 and rrbio2hivtst2rs2 = 2) then
		skip to BIO2HIVNEG;
	elseif (rrbio2hivtst1rs = 1 and rrbio2hivtst2rs2 = 2) or (rrbio2hivtst1rs2 =1 and rrbio2hivtst2rs2 = 2) then
		skip to BIO2INVALID;
	elseif (rrbio2hivtst1rs = 2 and rrbio2hivtst2rs2 = 1) or (rrbio2hivtst1rs2 =2 and rrbio2hivtst2rs2 = 1) then
		skip to BIO2INVALID;
	endif;
PROC BIO2HIVPOS
preproc
	$ = 'A';
PROC BIO2INVALID
preproc
	$ = 'A';
postproc
	skip to BIO2HIVEND;
	
PROC BIO2HIVIND
preproc
	$ = 'A';
PROC BIO2HIVNEG
preproc
	$ = 'A';
PROC BIO2HIVEND
preproc
	$ = 'A';
PROC BIO2_T2_TEMP
preproc 
	$ = "A";

onfocus
	
	if bio2hivtst2rs = 1 or bio2hivtst2rs2 = 1 then
		HIVSTATUS_2T = 1; // HIV POSITIVE
	elseif ((rrbio2hivtst1rs or rrbio2hivtst1rs2 = 1) and (rrbio2hivtst2rs or rrbio2hivtst2rs2 = 1)) then
		HIVSTATUS_2T = 1; // HIV POSITIVE
	elseif bio2hivtst1rs = 2 or bio2hivtst1rs2 = 2 then
		HIVSTATUS_2T = 2; // HIV NEGATIVE
	elseif ((rrbio2hivtst1rs or rrbio2hivtst1rs2 = 2) and (rrbio2hivtst2rs or rrbio2hivtst2rs2 = 2)) then
		HIVSTATUS_2T = 2; // HIV NEGATIVE
	elseif bio2hivtst1rs2 = 3 or bio2hivtst2rs2 = 3 then 
		HIVSTATUS_2T = 3; // HIV STATUS CANNOT BE DETERMINED
	elseif rrbio2hivtst1rs2 = 3 or rrbio2hivtst2rs2 = 3 then
		HIVSTATUS_2T = 3; // HIV STATUS CANNOT BE DETERMINED
	elseif ((rrbio2hivtst1rs or rrbio2hivtst1rs2 = 1) and (rrbio2hivtst2rs or rrbio2hivtst2rs2 = 2)) then
		HIVSTATUS_2T = 4; // HIV INDETERMINATE
	elseif ((rrbio2hivtst1rs or rrbio2hivtst1rs2 = 2) and (rrbio2hivtst2rs or rrbio2hivtst2rs2 = 1)) then
		HIVSTATUS_2T = 4; // HIV INDETERMINATE
	endif;

	FindHivStatus();
PROC BIO2EDT
preproc
	$ = FindDateTime();
	noinput;
postproc
	if (confagey >= 18 or
	   (confagey < 18 and ineeman = 1) or
	   (confagey < 18 and ineeman <> 1 and pprmcontact = 1)) and hivstatus = 1 then
		skip to LTCCONSENT;
	elseif HIVSTATUS = 2 then 
		skip to ENDSURVEY;
	endif;
PROC BIOMTEST3
preproc 
	ask if HIVTESTALG = 2;
PROC BIORAPID
preproc 
	$ = "A";
PROC BIOHIVTST1
preproc 
	$ = "A";
PROC BIOHIVTST1EX

preproc
	setcapturetype($,5,"YYYYMMDD");

postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIOHIVTST1RS

	if $ = 1 then 
		skip to BIOHIVTST2;
	elseif $ = 2 then
		skip to BIOHIVNEG;
	elseif $ = 3 then
		skip to BIOHIVTST12;
	endif;
PROC BIOHIVTST12
preproc 
	$ = "A";
PROC BIOHIVTST1EX2
preproc
	setcapturetype($,5,"YYYYMMDD");

postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIOHIVTST1RS2

	if $ = 1 then
		skip to BIOHIVTST2;
	elseif $ = 2 then 
		skip to BIOHIVNEG;
	elseif $ = 3 then
		skip to BIOINVALID;
	endif;
PROC BIOHIVTST2
preproc 
	$ = "A";
PROC BIOHIVTST2EX
preproc
	setcapturetype($,5,"YYYYMMDD");

postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIOHIVTST2RS

	if $ = 1 then
		skip to BIOHIVPOS;
	elseif $ = 2 then
		skip to BIOHIVTST3;
	elseif $ = 3 then 
		skip to BIOHIVTST22;
	endif;
PROC BIOHIVTST22
preproc 
	$ = "A";
PROC BIOHIVTST2EX2
preproc
	setcapturetype($,5,"YYYYMMDD");

postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIOHIVTST2RS2

	if $ = 1 then
		skip to BIOHIVPOS;
	elseif $ = 2 then
		skip to BIOHIVTST3;
	elseif $ = 3 then
		skip to BIOINVALID;
	endif;
PROC BIOHIVTST3
preproc 
	$ = "A";
PROC BIOHIVTST3EX
preproc
	setcapturetype($,5,"YYYYMMDD");

postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIOHIVTST3RS

	if $ = 1 then
		skip to BIOHIVPOS;
	elseif $ = 2 then
		skip to BIOHIVNEGREF;
	elseif $ = 3 then
		skip to BIOHIVTST32;
	endif;
PROC BIOHIVTST32
preproc 
	$ = "A";
PROC BIOHIVTST3EX2
preproc
	setcapturetype($,5,"YYYYMMDD");

postproc
	if $ <= currentDate then
		errmsg("The expiration date you've entered indicates the test is expired. Please check that you have entered the correct expiration date.");
		reenter;
	endif;
PROC BIOHIVTST3RS2

	if $ = 1 then
		skip to BIOHIVPOS;
	elseif $ = 2 then
		skip to BIOHIVNEGREF;
	elseif $ = 3 then
		skip to BIOINVALID;
	endif;
PROC BIOHIVPOS
preproc 
	$ = "A";
	
postproc
	skip to BIOHIVEND;
	
PROC BIOINVALID
preproc 
	$ = "A";
	
postproc
	skip to BIOHIVEND;
	
PROC BIOHIVNEG
preproc 
	$ = "A";
	
postproc
	skip to BIOHIVEND;
PROC BIO_T3_TEMP
preproc 
	$ = "A";

onfocus
	if (BIOHIVTST2RS = 1 or BIOHIVTST2RS2 = 1 or BIOHIVTST3RS = 1 or BIOHIVTST3RS2 = 1) then
		HIVSTATUS_3T = 1; // HIV POSITIVE
	elseif (BIOHIVTST1RS = 2 or BIOHIVTST1RS2 = 2 or BIOHIVTST3RS = 2 or BIOHIVTST3RS2 = 2) then
		HIVSTATUS_3T = 2; // HIV NEGATIVE
	elseif (BIOHIVTST1RS2 = 3 or BIOHIVTST2RS2 = 3 or BIOHIVTST3RS2 = 3) then
		HIVSTATUS_3T = 3; // HIV STATUS CANNOT BE DETERMINED
	endif;
	
	FindHivStatus();
PROC BIO3EDT

preproc
	$ = FindDateTime();
	noinput;
postproc
	if (confagey >= 18 or (confagey < 18 and ineeman = 1) or (confagey < 18 and ineeman <> 1 and pprmcontact = 1)) AND hivstatus = 1 then
		skip to LTCCONSENT;
	elseif HIVSTATUS = 2 then
		skip to ENDSURVEY;
	endif;
PROC LTCSTRT
	
PROC LTCLANG

postproc
	if visualvalue(LTCVRBL) = notappl then
		if $ = 1 then
			execsystem("view:" + adjustedPath + "shared/consents/Template_Appendix B5_Consent_Assent for Active LTC_tablet_r20190815.pdf")
		else
			warning("PDF consent not available for %s.", getvaluelabel($));
		endif;
	endif;
PROC LTCHOWVST

	if (LTCHOWSMS = 2 and LTCHOWPHN = 2) then 
		skip to LTCCONCONFIRM;
	elseif LTCHOWSMS = 2 and LTCHOWPHN = 2 and $ = 2 then
		errmsg("Participant must agree to be contacted by at least one method.");
		reenter;
	endif;
PROC LTCNOCONFIRM

	if $ = 1 then
		skip to LTCCONCONFIRM;
	endif;
PROC LTCCONCONFIRM

	if $ = 2 then
		errmsg("Please go back and correct the inaccurate response.");
		reenter;
	endif;
PROC LTCCONSTFDT

preproc
	$ = FindDateTime();
	noinput;
PROC LTCCONSTAFFID

	if length($) <> 6 then 
		errmsg("Staff ID must be 6 characters");
		reenter;
	endif;
PROC LTCCONSTATCALC

preproc
	if LTCVRBL = 1 then
		$ = 1; // GAVE PERMISSION
	elseif LTCVRBL = 2 then
		$ = 2; // REFUSED PERMISSION
	endif;
PROC LTCCONSTAT

	skip to ENDSURVEY;
	
PROC WITHDRAWAL

	if $ = 2 then 
		errmsg("Please swipe back and return to the last question to which the respondent responded.");
		reenter;
	endif;
PROC INDFORMEDT
preproc
	noinput;
	$ = FindDateTime();
PROC ENDSURVEY
preproc
	$ = "A";
PROC ENDCOMMENT

	endlevel;
